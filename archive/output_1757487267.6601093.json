{"content": {"suites": {"0": {"status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 1, "total_error": 0}, "tests": {"0": {"status": "FAIL", "message": "       TypeError: argument of type 'NoneType' is not iterable\n   selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#invalidsessionidexception\n   Stacktrace:\n   \tGetHandleVerifier [0x0x7ff708753d85+79397]\n   \tGetHandleVerifier [0x0x7ff708753de0+79488]\n   \t(No symbol) [0x0x7ff7084fbf2c]\n   \t(No symbol) [0x0x7ff7085432df]\n   \t(No symbol) [0x0x7ff70857b062]\n   \t(No symbol) [0x0x7ff708575b93]\n   \t(No symbol) [0x0x7ff708574c59]\n   \t(No symbol) [0x0x7ff7084c6fd5]\n   \tGetHandleVerifier [0x0x7ff708a1e1ed+3005069]\n   \tGetHandleVerifier [0x0x7ff708a1831d+2980797]\n   \tGetHandleVerifier [0x0x7ff708a37e0d+3110573]\n   \tGetHandleVerifier [0x0x7ff70876d6de+184190]\n   \tGetHandleVerifier [0x0x7ff70877516f+215567]\n   \t(No symbol) [0x0x7ff7084c5fd1]\n   \tGetHandleVerifier [0x0x7ff708b41d48+4199912]\n   \tBaseThreadInitThunk [0x0x7ffb14f0e8d7+23]\n   \tRtlUserThreadStart [0x0x7ffb1665c34c+44]\n", "test_name": "test_tc_reg_01[test_case0]", "rerun": "0"}}, "suite_name": "tests/test_TC_Reg_01.py"}, "1": {"suite_name": "tests/test_TC_Reg_02.py", "tests": {"0": {"status": "FAIL", "message": "   selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\n   from unknown error: web view not found\n     (Session info: chrome=139.0.7258.157)\n   Stacktrace:\n   \tGetHandleVerifier [0x0x7ff708753d85+79397]\n   \tGetHandleVerifier [0x0x7ff708753de0+79488]\n   \t(No symbol) [0x0x7ff7084fc0fa]\n   \t(No symbol) [0x0x7ff7084d4601]\n   \t(No symbol) [0x0x7ff70858257e]\n   \t(No symbol) [0x0x7ff7085a2c72]\n   \t(No symbol) [0x0x7ff70857af73]\n   \t(No symbol) [0x0x7ff7085441b1]\n   \t(No symbol) [0x0x7ff708544f43]\n   \tGetHandleVerifier [0x0x7ff708a1e1ed+3005069]\n   \tGetHandleVerifier [0x0x7ff708a1831d+2980797]\n   \tGetHandleVerifier [0x0x7ff708a37e0d+3110573]\n   \tGetHandleVerifier [0x0x7ff70876d6de+184190]\n   \tGetHandleVerifier [0x0x7ff70877516f+215567]\n   \tGetHandleVerifier [0x0x7ff70875c974+115220]\n   \tGetHandleVerifier [0x0x7ff70875cb29+115657]\n   \tGetHandleVerifier [0x0x7ff708743268+11016]\n   \tBaseThreadInitThunk [0x0x7ffb14f0e8d7+23]\n   \tRtlUserThreadStart [0x0x7ffb1665c34c+44]\n   selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\n   from unknown error: web view not found\n     (Session info: chrome=139.0.7258.157)\n   Stacktrace:\n   \tGetHandleVerifier [0x0x7ff708753d85+79397]\n   \tGetHandleVerifier [0x0x7ff708753de0+79488]\n   \t(No symbol) [0x0x7ff7084fc0fa]\n   \t(No symbol) [0x0x7ff7084d4601]\n   \t(No symbol) [0x0x7ff70858257e]\n   \t(No symbol) [0x0x7ff7085a2c72]\n   \t(No symbol) [0x0x7ff70857af73]\n   \t(No symbol) [0x0x7ff7085441b1]\n   \t(No symbol) [0x0x7ff708544f43]\n   \tGetHandleVerifier [0x0x7ff708a1e1ed+3005069]\n   \tGetHandleVerifier [0x0x7ff708a1831d+2980797]\n   \tGetHandleVerifier [0x0x7ff708a37e0d+3110573]\n   \tGetHandleVerifier [0x0x7ff70876d6de+184190]\n   \tGetHandleVerifier [0x0x7ff70877516f+215567]\n   \tGetHandleVerifier [0x0x7ff70875c974+115220]\n   \tGetHandleVerifier [0x0x7ff70875cb29+115657]\n   \tGetHandleVerifier [0x0x7ff708743268+11016]\n   \tBaseThreadInitThunk [0x0x7ffb14f0e8d7+23]\n   \tRtlUserThreadStart [0x0x7ffb1665c34c+44]\n", "test_name": "test_tc_reg_02[test_case0]", "rerun": "0"}}, "status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 1, "total_error": 0}}, "2": {"suite_name": "tests/test_TC_Reg_03.py", "tests": {"0": {"status": "ERROR", "message": "request = <SubRequest 'browser_config' for <Function test_tc_reg_03[test_case0]>>\n\n    @pytest.fixture(scope=\"function\")\n    def browser_config(request):\n        \"\"\"\n        Configures and returns a Selenium WebDriver instance based on the\n        --browser command-line option.\n        \"\"\"\n        browser_type = request.config.getoption(\"--browser\").lower()\n        driver = None\n        logging.info(f\"Starting browser session with {browser_type}...\")\n    \n        if browser_type == \"chrome\":\n            chrome_options = ChromeOptions()\n            chrome_options.add_argument(\"--headed\")\n            driver = webdriver.Chrome(options=chrome_options)\n        elif browser_type == \"firefox\":\n            firefox_options = FirefoxOptions()\n            firefox_options.add_argument(\"--headed\")\n            driver = webdriver.Firefox(options=firefox_options)\n        elif browser_type == \"edge\":\n            edge_options = EdgeOptions()\n            edge_options.add_argument(\"--headed\")\n            driver = webdriver.Edge(options=edge_options)\n        else:\n            raise ValueError(f\"Unsupported browser type: {browser_type}\")\n    \n        logging.info(f\"{browser_type} browser launched successfully.\")\n    \n        driver.maximize_window()\n        driver.implicitly_wait(5)\n        wait = WebDriverWait(driver, 20)\n>       driver.get(\"https://admission-test.doer.school/en\")\n\nconftest.py:53: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nC:\\Users\\sinth\\Downloads\\Movie_Ticket_Automation-master\\Movie_Ticket_Automation-master\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:483: in get\n    self.execute(Command.GET, {\"url\": url})\nC:\\Users\\sinth\\Downloads\\Movie_Ticket_Automation-master\\Movie_Ticket_Automation-master\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:458: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000020F20304B90>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"target frame detached\",\"message\":\"target frame detached\\\\n  (failed to ch...ff708743268+11016]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffb14f0e8d7+23]\\\\n\\\\tRtlUserThreadStart [0x0x7ffb1665c34c+44]\\\\n\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\")\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: target frame detached\nE         (failed to check if window was closed: disconnected: Unable to receive message from renderer)\nE         (Session info: chrome=139.0.7258.157)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff708753d85+79397]\nE       \tGetHandleVerifier [0x0x7ff708753de0+79488]\nE       \t(No symbol) [0x0x7ff7084fbf2c]\nE       \t(No symbol) [0x0x7ff7084e969b]\nE       \t(No symbol) [0x0x7ff7084e855e]\nE       \t(No symbol) [0x0x7ff70850ceee]\nE       \t(No symbol) [0x0x7ff70850c233]\nE       \t(No symbol) [0x0x7ff7085a3699]\nE       \t(No symbol) [0x0x7ff70857af73]\nE       \t(No symbol) [0x0x7ff7085441b1]\nE       \t(No symbol) [0x0x7ff708544f43]\nE       \tGetHandleVerifier [0x0x7ff708a1e1ed+3005069]\nE       \tGetHandleVerifier [0x0x7ff708a1831d+2980797]\nE       \tGetHandleVerifier [0x0x7ff708a37e0d+3110573]\nE       \tGetHandleVerifier [0x0x7ff70876d6de+184190]\nE       \tGetHandleVerifier [0x0x7ff70877516f+215567]\nE       \tGetHandleVerifier [0x0x7ff70875c974+115220]\nE       \tGetHandleVerifier [0x0x7ff70875cb29+115657]\nE       \tGetHandleVerifier [0x0x7ff708743268+11016]\nE       \tBaseThreadInitThunk [0x0x7ffb14f0e8d7+23]\nE       \tRtlUserThreadStart [0x0x7ffb1665c34c+44]\n\nC:\\Users\\sinth\\Downloads\\Movie_Ticket_Automation-master\\Movie_Ticket_Automation-master\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: WebDriverException\n", "test_name": "test_tc_reg_03[test_case0]", "rerun": "0"}}, "status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 1}}}}, "date": "September 09, 2025", "start_time": 1757419703.3035464, "total_suite": 3, "status": "FAIL", "status_list": {"pass": "0", "fail": "2", "skip": "0", "error": "1", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "3"}