{"uid":"4036b302696b9e07","name":"test_tc_reg_16[test_case0]","fullName":"tests.test_TC_Reg_16#test_tc_reg_16","historyId":"a072e85c7729e6dee7daafd826066ebe","time":{"start":1757503075589,"stop":1757503212762,"duration":137173},"description":"TC_Reg_16: Verify Page Responsive Design","descriptionHtml":"<p>TC_Reg_16: Verify Page Responsive Design</p>\n","status":"failed","statusMessage":"Failed: Responsive design test failed. Success rate: 66.7%","statusTrace":"browser_config = (<selenium.webdriver.chrome.webdriver.WebDriver (session=\"150680f724ccc88bf2f7d5cc189f19dd\")>, <selenium.webdriver.support.wait.WebDriverWait (session=\"150680f724ccc88bf2f7d5cc189f19dd\")>)\ntest_case = {'admission_portal': [{'TC_AD_01': {'_comment': 'Verify All Available Admissions Display on Main Page', 'expected_resu...nd navigate previous school information form', 'father_address': 'Dhaka', 'father_contact': '01789571651', ...}}], ...}\n\n    @pytest.mark.parametrize(\"test_case\", load_all_test_data(\"../data/data.json\"))\n    def test_tc_reg_16(browser_config, test_case):\n        \"\"\"TC_Reg_16: Verify Page Responsive Design\"\"\"\n        logging.info(\"TC_Reg_16 Started..\")\n        logging.info(test_case[\"registration\"][15][\"TC_Reg_16\"][\"_comment\"])\n    \n        driver, wait = browser_config\n    \n        # Create objects for page classes\n        registration_page = RegistrationPage(driver, wait)\n        login_page = LoginPage(driver, wait)\n    \n        # Get test data\n        test_data = test_case[\"registration\"][15][\"TC_Reg_16\"]\n        test_devices = test_data[\"test_devices\"]\n    \n        # Define device dimensions\n        device_dimensions = {\n            \"desktop\": {\"width\": 1920, \"height\": 1080},\n            \"tablet\": {\"width\": 768, \"height\": 1024},\n            \"mobile\": {\"width\": 375, \"height\": 667},\n            \"mobile_large\": {\"width\": 414, \"height\": 896}\n        }\n    \n        responsive_test_results = {}\n    \n        # Test homepage responsiveness\n        try:\n            logging.info(\"Testing homepage responsiveness...\")\n    \n            for device in test_devices:\n                if device in device_dimensions:\n                    dimensions = device_dimensions[device]\n    \n                    # Set browser window size\n                    driver.set_window_size(dimensions[\"width\"], dimensions[\"height\"])\n                    logging.info(f\"Set browser size to {device}: {dimensions['width']}x{dimensions['height']}\")\n                    time.sleep(2)\n    \n                    # Navigate to homepage\n                    driver.get(\"https://admission-test.doer.school/en\")\n                    time.sleep(3)\n    \n                    # Test homepage elements visibility and functionality\n                    try:\n                        # Check if heading is visible\n                        heading = registration_page.get_homepage_heading()\n                        if heading:\n                            logging.info(f\"Homepage heading visible on {device}: {heading}\")\n                            responsive_test_results[f\"homepage_{device}_heading\"] = True\n                        else:\n                            logging.warning(f\"data=========== {heading}\")\n                            logging.warning(f\"Homepage heading not visible on {device}\")\n                            responsive_test_results[f\"homepage_{device}_heading\"] = False\n    \n                        # Test Sign Up button functionality\n                        registration_page.click_sign_up_for_free_button()\n                        logging.info(f\"Sign Up button functional on {device}\")\n                        responsive_test_results[f\"homepage_{device}_button\"] = True\n    \n                        # Take screenshot for this device\n                        capture_full_page_screenshot(driver, f\"TC_Reg_16_Homepage_{device}\")\n    \n                    except Exception as e:\n                        logging.error(f\"Homepage functionality test failed on {device}: {e}\")\n                        responsive_test_results[f\"homepage_{device}_button\"] = False\n                        capture_full_page_screenshot(driver, f\"TC_Reg_16_Homepage_{device}_Error\")\n    \n        except Exception as e:\n            logging.error(f\"Homepage responsive testing failed: {e}\")\n            capture_full_page_screenshot(driver, \"TC_Reg_16_Homepage_Responsive_Error\")\n            pytest.fail(f\"Homepage responsive testing failed: {e}\")\n    \n        # Test Sign Up page responsiveness\n        try:\n            logging.info(\"Testing Sign Up page responsiveness...\")\n    \n            for device in test_devices:\n                if device in device_dimensions:\n                    dimensions = device_dimensions[device]\n    \n                    # Set browser window size\n                    driver.set_window_size(dimensions[\"width\"], dimensions[\"height\"])\n                    logging.info(f\"Testing Sign Up page on {device}: {dimensions['width']}x{dimensions['height']}\")\n                    time.sleep(2)\n    \n                    # Navigate to Sign Up page\n                    try:\n                        driver.get(\"https://admission-test.doer.school/en\")\n                        time.sleep(2)\n                        registration_page.click_sign_up_for_free_button()\n                        time.sleep(3)\n    \n                        # Test Sign Up page elements\n                        signup_heading = registration_page.get_signup_heading()\n                        if signup_heading:\n                            logging.info(f\"Sign Up heading visible on {device}\")\n                            responsive_test_results[f\"signup_{device}_heading\"] = True\n                        else:\n                            logging.warning(f\"Sign Up heading not visible on {device}\")\n                            responsive_test_results[f\"signup_{device}_heading\"] = False\n    \n                        # Test form fields visibility\n                        expected_fields = [\"Full Name\", \"Email\", \"Password\", \"Confirm Password\"]\n                        fields_visible = registration_page.verify_form_fields_present(expected_fields)\n    \n                        if fields_visible:\n                            logging.info(f\"All form fields visible on {device}\")\n                            responsive_test_results[f\"signup_{device}_fields\"] = True\n                        else:\n                            logging.warning(f\"Some form fields not visible on {device}\")\n                            responsive_test_results[f\"signup_{device}_fields\"] = False\n    \n                        # Test form interaction (enter sample data)\n                        try:\n                            registration_page.enter_full_name(\"Test User\")\n                            registration_page.enter_email(\"test@example.com\")\n                            registration_page.enter_password(\"TestPass123\")\n                            registration_page.enter_confirm_password(\"TestPass123\")\n    \n                            logging.info(f\"Form interaction successful on {device}\")\n                            responsive_test_results[f\"signup_{device}_interaction\"] = True\n    \n                            # Clear fields for next test\n                            driver.refresh()\n                            time.sleep(2)\n    \n                        except Exception as e:\n                            logging.warning(f\"Form interaction failed on {device}: {e}\")\n                            responsive_test_results[f\"signup_{device}_interaction\"] = False\n    \n                        # Take screenshot\n                        capture_full_page_screenshot(driver, f\"TC_Reg_16_SignUp_{device}\")\n    \n                    except Exception as e:\n                        logging.error(f\"Sign Up page testing failed on {device}: {e}\")\n                        responsive_test_results[f\"signup_{device}\"] = False\n                        capture_full_page_screenshot(driver, f\"TC_Reg_16_SignUp_{device}_Error\")\n    \n        except Exception as e:\n            logging.error(f\"Sign Up page responsive testing failed: {e}\")\n            capture_full_page_screenshot(driver, \"TC_Reg_16_SignUp_Responsive_Error\")\n            # Continue test instead of failing\n            logging.warning(\"Continuing with Sign In page testing...\")\n    \n        # Test Sign In page responsiveness\n        try:\n            logging.info(\"Testing Sign In page responsiveness...\")\n    \n            for device in test_devices:\n                if device in device_dimensions:\n                    dimensions = device_dimensions[device]\n    \n                    # Set browser window size\n                    driver.set_window_size(dimensions[\"width\"], dimensions[\"height\"])\n                    logging.info(f\"Testing Sign In page on {device}: {dimensions['width']}x{dimensions['height']}\")\n                    time.sleep(2)\n    \n                    # Navigate to Sign In page\n                    try:\n                        driver.get(\"https://admission-test.doer.school/en\")\n                        time.sleep(2)\n                        registration_page.click_sign_up_for_free_button()\n                        time.sleep(2)\n                        registration_page.click_signin_link_from_signup()\n                        time.sleep(3)\n    \n                        # Test Sign In page elements\n                        signin_heading = login_page.get_signin_heading()\n                        if signin_heading:\n                            logging.info(f\"Sign In heading visible on {device}\")\n                            responsive_test_results[f\"signin_{device}_heading\"] = True\n                        else:\n                            logging.warning(f\"Sign In heading not visible on {device}\")\n                            responsive_test_results[f\"signin_{device}_heading\"] = False\n    \n                        # Test form elements visibility\n                        expected_elements = [\"Email\", \"Password\", \"Keep me logged in\", \"Log In\"]\n                        elements_visible = login_page.verify_signin_form_elements(expected_elements)\n    \n                        if elements_visible:\n                            logging.info(f\"All Sign In elements visible on {device}\")\n                            responsive_test_results[f\"signin_{device}_elements\"] = True\n                        else:\n                            logging.warning(f\"Some Sign In elements not visible on {device}\")\n                            responsive_test_results[f\"signin_{device}_elements\"] = False\n    \n                        # Test form interaction\n                        try:\n                            login_page.enter_email(\"test@example.com\")\n                            login_page.enter_password(\"TestPass123\")\n    \n                            logging.info(f\"Sign In form interaction successful on {device}\")\n                            responsive_test_results[f\"signin_{device}_interaction\"] = True\n    \n                            # Clear fields\n                            driver.refresh()\n                            time.sleep(2)\n    \n                        except Exception as e:\n                            logging.warning(f\"Sign In form interaction failed on {device}: {e}\")\n                            responsive_test_results[f\"signin_{device}_interaction\"] = False\n    \n                        # Take screenshot\n                        capture_full_page_screenshot(driver, f\"TC_Reg_16_SignIn_{device}\")\n    \n                    except Exception as e:\n                        logging.error(f\"Sign In page testing failed on {device}: {e}\")\n                        responsive_test_results[f\"signin_{device}\"] = False\n                        capture_full_page_screenshot(driver, f\"TC_Reg_16_SignIn_{device}_Error\")\n    \n        except Exception as e:\n            logging.error(f\"Sign In page responsive testing failed: {e}\")\n            capture_full_page_screenshot(driver, \"TC_Reg_16_SignIn_Responsive_Error\")\n            # Continue to validation\n    \n        # Additional mobile-specific tests\n        try:\n            logging.info(\"Performing additional mobile-specific tests...\")\n    \n            # Test mobile portrait orientation\n            driver.set_window_size(375, 667)  # iPhone SE size\n            time.sleep(2)\n    \n            # Test touch-friendly elements (button sizes, spacing)\n            driver.get(\"https://admission-test.doer.school/en\")\n            time.sleep(2)\n            registration_page.click_sign_up_for_free_button()\n            time.sleep(2)\n    \n            # Check if buttons are touch-friendly (minimum 44px height/width)\n            try:\n                signup_button = driver.find_element(By.CSS_SELECTOR, \"button[type='submit'], button:contains('Sign Up')\")\n                button_size = signup_button.size\n    \n                if button_size['height'] >= 44 and button_size['width'] >= 44:\n                    logging.info(f\"Sign Up button is touch-friendly: {button_size}\")\n                    responsive_test_results[\"mobile_touch_friendly\"] = True\n                else:\n                    logging.warning(f\"Sign Up button might not be touch-friendly: {button_size}\")\n                    responsive_test_results[\"mobile_touch_friendly\"] = False\n    \n            except Exception as e:\n                logging.warning(f\"Touch-friendly button check failed: {e}\")\n                responsive_test_results[\"mobile_touch_friendly\"] = False\n    \n            # Test mobile landscape orientation\n            driver.set_window_size(667, 375)  # iPhone SE landscape\n            time.sleep(2)\n    \n            # Verify layout still works in landscape\n            try:\n                signup_heading = registration_page.get_signup_heading()\n                if signup_heading:\n                    logging.info(\"Sign Up page functional in mobile landscape\")\n                    responsive_test_results[\"mobile_landscape\"] = True\n                else:\n                    logging.warning(\"Sign Up page issues in mobile landscape\")\n                    responsive_test_results[\"mobile_landscape\"] = False\n            except Exception as e:\n                logging.warning(f\"Mobile landscape test failed: {e}\")\n                responsive_test_results[\"mobile_landscape\"] = False\n    \n            capture_full_page_screenshot(driver, \"TC_Reg_16_Mobile_Landscape\")\n    \n        except Exception as e:\n            logging.warning(f\"Additional mobile tests failed: {e}\")\n    \n        # Reset to desktop size for final verification\n        driver.set_window_size(1920, 1080)\n        time.sleep(2)\n    \n        # Final validation and results analysis\n        try:\n            logging.info(\"RESPONSIVE DESIGN TEST RESULTS SUMMARY:\")\n    \n            total_tests = len(responsive_test_results)\n            passed_tests = sum(1 for result in responsive_test_results.values() if result)\n    \n            logging.info(f\"Total tests: {total_tests}\")\n            logging.info(f\"Passed tests: {passed_tests}\")\n            logging.info(f\"Success rate: {(passed_tests / total_tests) * 100:.1f}%\")\n    \n            # Log detailed results\n            for test_name, result in responsive_test_results.items():\n                status = \"PASS\" if result else \"FAIL\"\n                logging.info(f\"{test_name}: {status}\")\n    \n            # Determine overall test result\n            # Consider test passed if at least 80% of responsive tests pass\n            success_threshold = 0.8\n            success_rate = passed_tests / total_tests if total_tests > 0 else 0\n    \n            if success_rate >= success_threshold:\n                expected_result = test_data[\"expected_result\"]\n                logging.info(f\"Test Passed. {expected_result}\")\n                logging.info(f\"Responsive design verification successful with {success_rate * 100:.1f}% pass rate.\")\n            else:\n                logging.error(\n                    f\"Responsive design test failed. Success rate: {success_rate * 100:.1f}% (threshold: {success_threshold * 100}%)\")\n                capture_full_page_screenshot(driver, \"TC_Reg_16_Overall_Failed\")\n    \n                # Log specific failures\n                failed_tests = [test for test, result in responsive_test_results.items() if not result]\n                logging.error(f\"Failed tests: {failed_tests}\")\n    \n>               pytest.fail(f\"Responsive design test failed. Success rate: {success_rate * 100:.1f}%\")\nE               Failed: Responsive design test failed. Success rate: 66.7%\n\ntests\\test_TC_Reg_16.py:318: Failed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"browser_config","time":{"start":1757503072389,"stop":1757503075586,"duration":3197},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false,"attachmentStep":false,"stepsCount":0}],"testStage":{"description":"TC_Reg_16: Verify Page Responsive Design","status":"failed","statusMessage":"Failed: Responsive design test failed. Success rate: 66.7%","statusTrace":"browser_config = (<selenium.webdriver.chrome.webdriver.WebDriver (session=\"150680f724ccc88bf2f7d5cc189f19dd\")>, <selenium.webdriver.support.wait.WebDriverWait (session=\"150680f724ccc88bf2f7d5cc189f19dd\")>)\ntest_case = {'admission_portal': [{'TC_AD_01': {'_comment': 'Verify All Available Admissions Display on Main Page', 'expected_resu...nd navigate previous school information form', 'father_address': 'Dhaka', 'father_contact': '01789571651', ...}}], ...}\n\n    @pytest.mark.parametrize(\"test_case\", load_all_test_data(\"../data/data.json\"))\n    def test_tc_reg_16(browser_config, test_case):\n        \"\"\"TC_Reg_16: Verify Page Responsive Design\"\"\"\n        logging.info(\"TC_Reg_16 Started..\")\n        logging.info(test_case[\"registration\"][15][\"TC_Reg_16\"][\"_comment\"])\n    \n        driver, wait = browser_config\n    \n        # Create objects for page classes\n        registration_page = RegistrationPage(driver, wait)\n        login_page = LoginPage(driver, wait)\n    \n        # Get test data\n        test_data = test_case[\"registration\"][15][\"TC_Reg_16\"]\n        test_devices = test_data[\"test_devices\"]\n    \n        # Define device dimensions\n        device_dimensions = {\n            \"desktop\": {\"width\": 1920, \"height\": 1080},\n            \"tablet\": {\"width\": 768, \"height\": 1024},\n            \"mobile\": {\"width\": 375, \"height\": 667},\n            \"mobile_large\": {\"width\": 414, \"height\": 896}\n        }\n    \n        responsive_test_results = {}\n    \n        # Test homepage responsiveness\n        try:\n            logging.info(\"Testing homepage responsiveness...\")\n    \n            for device in test_devices:\n                if device in device_dimensions:\n                    dimensions = device_dimensions[device]\n    \n                    # Set browser window size\n                    driver.set_window_size(dimensions[\"width\"], dimensions[\"height\"])\n                    logging.info(f\"Set browser size to {device}: {dimensions['width']}x{dimensions['height']}\")\n                    time.sleep(2)\n    \n                    # Navigate to homepage\n                    driver.get(\"https://admission-test.doer.school/en\")\n                    time.sleep(3)\n    \n                    # Test homepage elements visibility and functionality\n                    try:\n                        # Check if heading is visible\n                        heading = registration_page.get_homepage_heading()\n                        if heading:\n                            logging.info(f\"Homepage heading visible on {device}: {heading}\")\n                            responsive_test_results[f\"homepage_{device}_heading\"] = True\n                        else:\n                            logging.warning(f\"data=========== {heading}\")\n                            logging.warning(f\"Homepage heading not visible on {device}\")\n                            responsive_test_results[f\"homepage_{device}_heading\"] = False\n    \n                        # Test Sign Up button functionality\n                        registration_page.click_sign_up_for_free_button()\n                        logging.info(f\"Sign Up button functional on {device}\")\n                        responsive_test_results[f\"homepage_{device}_button\"] = True\n    \n                        # Take screenshot for this device\n                        capture_full_page_screenshot(driver, f\"TC_Reg_16_Homepage_{device}\")\n    \n                    except Exception as e:\n                        logging.error(f\"Homepage functionality test failed on {device}: {e}\")\n                        responsive_test_results[f\"homepage_{device}_button\"] = False\n                        capture_full_page_screenshot(driver, f\"TC_Reg_16_Homepage_{device}_Error\")\n    \n        except Exception as e:\n            logging.error(f\"Homepage responsive testing failed: {e}\")\n            capture_full_page_screenshot(driver, \"TC_Reg_16_Homepage_Responsive_Error\")\n            pytest.fail(f\"Homepage responsive testing failed: {e}\")\n    \n        # Test Sign Up page responsiveness\n        try:\n            logging.info(\"Testing Sign Up page responsiveness...\")\n    \n            for device in test_devices:\n                if device in device_dimensions:\n                    dimensions = device_dimensions[device]\n    \n                    # Set browser window size\n                    driver.set_window_size(dimensions[\"width\"], dimensions[\"height\"])\n                    logging.info(f\"Testing Sign Up page on {device}: {dimensions['width']}x{dimensions['height']}\")\n                    time.sleep(2)\n    \n                    # Navigate to Sign Up page\n                    try:\n                        driver.get(\"https://admission-test.doer.school/en\")\n                        time.sleep(2)\n                        registration_page.click_sign_up_for_free_button()\n                        time.sleep(3)\n    \n                        # Test Sign Up page elements\n                        signup_heading = registration_page.get_signup_heading()\n                        if signup_heading:\n                            logging.info(f\"Sign Up heading visible on {device}\")\n                            responsive_test_results[f\"signup_{device}_heading\"] = True\n                        else:\n                            logging.warning(f\"Sign Up heading not visible on {device}\")\n                            responsive_test_results[f\"signup_{device}_heading\"] = False\n    \n                        # Test form fields visibility\n                        expected_fields = [\"Full Name\", \"Email\", \"Password\", \"Confirm Password\"]\n                        fields_visible = registration_page.verify_form_fields_present(expected_fields)\n    \n                        if fields_visible:\n                            logging.info(f\"All form fields visible on {device}\")\n                            responsive_test_results[f\"signup_{device}_fields\"] = True\n                        else:\n                            logging.warning(f\"Some form fields not visible on {device}\")\n                            responsive_test_results[f\"signup_{device}_fields\"] = False\n    \n                        # Test form interaction (enter sample data)\n                        try:\n                            registration_page.enter_full_name(\"Test User\")\n                            registration_page.enter_email(\"test@example.com\")\n                            registration_page.enter_password(\"TestPass123\")\n                            registration_page.enter_confirm_password(\"TestPass123\")\n    \n                            logging.info(f\"Form interaction successful on {device}\")\n                            responsive_test_results[f\"signup_{device}_interaction\"] = True\n    \n                            # Clear fields for next test\n                            driver.refresh()\n                            time.sleep(2)\n    \n                        except Exception as e:\n                            logging.warning(f\"Form interaction failed on {device}: {e}\")\n                            responsive_test_results[f\"signup_{device}_interaction\"] = False\n    \n                        # Take screenshot\n                        capture_full_page_screenshot(driver, f\"TC_Reg_16_SignUp_{device}\")\n    \n                    except Exception as e:\n                        logging.error(f\"Sign Up page testing failed on {device}: {e}\")\n                        responsive_test_results[f\"signup_{device}\"] = False\n                        capture_full_page_screenshot(driver, f\"TC_Reg_16_SignUp_{device}_Error\")\n    \n        except Exception as e:\n            logging.error(f\"Sign Up page responsive testing failed: {e}\")\n            capture_full_page_screenshot(driver, \"TC_Reg_16_SignUp_Responsive_Error\")\n            # Continue test instead of failing\n            logging.warning(\"Continuing with Sign In page testing...\")\n    \n        # Test Sign In page responsiveness\n        try:\n            logging.info(\"Testing Sign In page responsiveness...\")\n    \n            for device in test_devices:\n                if device in device_dimensions:\n                    dimensions = device_dimensions[device]\n    \n                    # Set browser window size\n                    driver.set_window_size(dimensions[\"width\"], dimensions[\"height\"])\n                    logging.info(f\"Testing Sign In page on {device}: {dimensions['width']}x{dimensions['height']}\")\n                    time.sleep(2)\n    \n                    # Navigate to Sign In page\n                    try:\n                        driver.get(\"https://admission-test.doer.school/en\")\n                        time.sleep(2)\n                        registration_page.click_sign_up_for_free_button()\n                        time.sleep(2)\n                        registration_page.click_signin_link_from_signup()\n                        time.sleep(3)\n    \n                        # Test Sign In page elements\n                        signin_heading = login_page.get_signin_heading()\n                        if signin_heading:\n                            logging.info(f\"Sign In heading visible on {device}\")\n                            responsive_test_results[f\"signin_{device}_heading\"] = True\n                        else:\n                            logging.warning(f\"Sign In heading not visible on {device}\")\n                            responsive_test_results[f\"signin_{device}_heading\"] = False\n    \n                        # Test form elements visibility\n                        expected_elements = [\"Email\", \"Password\", \"Keep me logged in\", \"Log In\"]\n                        elements_visible = login_page.verify_signin_form_elements(expected_elements)\n    \n                        if elements_visible:\n                            logging.info(f\"All Sign In elements visible on {device}\")\n                            responsive_test_results[f\"signin_{device}_elements\"] = True\n                        else:\n                            logging.warning(f\"Some Sign In elements not visible on {device}\")\n                            responsive_test_results[f\"signin_{device}_elements\"] = False\n    \n                        # Test form interaction\n                        try:\n                            login_page.enter_email(\"test@example.com\")\n                            login_page.enter_password(\"TestPass123\")\n    \n                            logging.info(f\"Sign In form interaction successful on {device}\")\n                            responsive_test_results[f\"signin_{device}_interaction\"] = True\n    \n                            # Clear fields\n                            driver.refresh()\n                            time.sleep(2)\n    \n                        except Exception as e:\n                            logging.warning(f\"Sign In form interaction failed on {device}: {e}\")\n                            responsive_test_results[f\"signin_{device}_interaction\"] = False\n    \n                        # Take screenshot\n                        capture_full_page_screenshot(driver, f\"TC_Reg_16_SignIn_{device}\")\n    \n                    except Exception as e:\n                        logging.error(f\"Sign In page testing failed on {device}: {e}\")\n                        responsive_test_results[f\"signin_{device}\"] = False\n                        capture_full_page_screenshot(driver, f\"TC_Reg_16_SignIn_{device}_Error\")\n    \n        except Exception as e:\n            logging.error(f\"Sign In page responsive testing failed: {e}\")\n            capture_full_page_screenshot(driver, \"TC_Reg_16_SignIn_Responsive_Error\")\n            # Continue to validation\n    \n        # Additional mobile-specific tests\n        try:\n            logging.info(\"Performing additional mobile-specific tests...\")\n    \n            # Test mobile portrait orientation\n            driver.set_window_size(375, 667)  # iPhone SE size\n            time.sleep(2)\n    \n            # Test touch-friendly elements (button sizes, spacing)\n            driver.get(\"https://admission-test.doer.school/en\")\n            time.sleep(2)\n            registration_page.click_sign_up_for_free_button()\n            time.sleep(2)\n    \n            # Check if buttons are touch-friendly (minimum 44px height/width)\n            try:\n                signup_button = driver.find_element(By.CSS_SELECTOR, \"button[type='submit'], button:contains('Sign Up')\")\n                button_size = signup_button.size\n    \n                if button_size['height'] >= 44 and button_size['width'] >= 44:\n                    logging.info(f\"Sign Up button is touch-friendly: {button_size}\")\n                    responsive_test_results[\"mobile_touch_friendly\"] = True\n                else:\n                    logging.warning(f\"Sign Up button might not be touch-friendly: {button_size}\")\n                    responsive_test_results[\"mobile_touch_friendly\"] = False\n    \n            except Exception as e:\n                logging.warning(f\"Touch-friendly button check failed: {e}\")\n                responsive_test_results[\"mobile_touch_friendly\"] = False\n    \n            # Test mobile landscape orientation\n            driver.set_window_size(667, 375)  # iPhone SE landscape\n            time.sleep(2)\n    \n            # Verify layout still works in landscape\n            try:\n                signup_heading = registration_page.get_signup_heading()\n                if signup_heading:\n                    logging.info(\"Sign Up page functional in mobile landscape\")\n                    responsive_test_results[\"mobile_landscape\"] = True\n                else:\n                    logging.warning(\"Sign Up page issues in mobile landscape\")\n                    responsive_test_results[\"mobile_landscape\"] = False\n            except Exception as e:\n                logging.warning(f\"Mobile landscape test failed: {e}\")\n                responsive_test_results[\"mobile_landscape\"] = False\n    \n            capture_full_page_screenshot(driver, \"TC_Reg_16_Mobile_Landscape\")\n    \n        except Exception as e:\n            logging.warning(f\"Additional mobile tests failed: {e}\")\n    \n        # Reset to desktop size for final verification\n        driver.set_window_size(1920, 1080)\n        time.sleep(2)\n    \n        # Final validation and results analysis\n        try:\n            logging.info(\"RESPONSIVE DESIGN TEST RESULTS SUMMARY:\")\n    \n            total_tests = len(responsive_test_results)\n            passed_tests = sum(1 for result in responsive_test_results.values() if result)\n    \n            logging.info(f\"Total tests: {total_tests}\")\n            logging.info(f\"Passed tests: {passed_tests}\")\n            logging.info(f\"Success rate: {(passed_tests / total_tests) * 100:.1f}%\")\n    \n            # Log detailed results\n            for test_name, result in responsive_test_results.items():\n                status = \"PASS\" if result else \"FAIL\"\n                logging.info(f\"{test_name}: {status}\")\n    \n            # Determine overall test result\n            # Consider test passed if at least 80% of responsive tests pass\n            success_threshold = 0.8\n            success_rate = passed_tests / total_tests if total_tests > 0 else 0\n    \n            if success_rate >= success_threshold:\n                expected_result = test_data[\"expected_result\"]\n                logging.info(f\"Test Passed. {expected_result}\")\n                logging.info(f\"Responsive design verification successful with {success_rate * 100:.1f}% pass rate.\")\n            else:\n                logging.error(\n                    f\"Responsive design test failed. Success rate: {success_rate * 100:.1f}% (threshold: {success_threshold * 100}%)\")\n                capture_full_page_screenshot(driver, \"TC_Reg_16_Overall_Failed\")\n    \n                # Log specific failures\n                failed_tests = [test for test, result in responsive_test_results.items() if not result]\n                logging.error(f\"Failed tests: {failed_tests}\")\n    \n>               pytest.fail(f\"Responsive design test failed. Success rate: {success_rate * 100:.1f}%\")\nE               Failed: Responsive design test failed. Success rate: 66.7%\n\ntests\\test_TC_Reg_16.py:318: Failed","steps":[],"attachments":[{"uid":"5defcd2f4f6c59b8","name":"log","source":"5defcd2f4f6c59b8.txt","type":"text/plain","size":5325}],"parameters":[],"hasContent":true,"attachmentsCount":1,"shouldDisplayMessage":true,"attachmentStep":false,"stepsCount":0},"afterStages":[{"name":"browser_config::0","time":{"start":1757503212929,"stop":1757503215311,"duration":2382},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false,"attachmentStep":false,"stepsCount":0}],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_TC_Reg_16"},{"name":"host","value":"prapti"},{"name":"thread","value":"17280-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_TC_Reg_16"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"test_case","value":"{'registration': [{'TC_Reg_01': {'_comment': 'Verify Homepage Load and Sign Up Button Navigation', 'homepage_url': 'https://admission-test.doer.school/en', 'expected_heading': \"Your Child's Future Begins Here\", 'expected_stats': {'students': '20000+', 'guardians': '1643+', 'teachers': '7000+', 'schools': '2000+'}, 'expected_result': 'Homepage loads successfully and navigates to Sign Up page'}}, {'TC_Reg_02': {'_comment': 'Verify Sign Up Page Load and Form Display', 'expected_heading': 'Sign Up', 'expected_subtitle': 'Create your account to get started!', 'expected_form_fields': ['Full Name', 'Email', 'Password', 'Confirm Password'], 'expected_buttons': ['Sign Up', 'Sign up with Google'], 'expected_result': 'Sign Up page loads with all required form elements'}}, {'TC_Reg_03': {'_comment': 'Verify Complete User Registration with Valid Data', 'fullname': 'John Doe', 'email': 'john.doe.test__24@gmail.com', 'password': 'TestPass123__1', 'confirm_password': 'TestPass123__1', 'expected_result': 'Registration successful! Please log in with your credentials.'}}, {'TC_Reg_04': {'_comment': 'Verify Navigation from Sign Up to Sign In Page', 'link_text': 'Already have an account?', 'signin_link': 'Sign In', 'expected_result': 'User navigated to Sign In page successfully'}}, {'TC_Reg_05': {'_comment': 'Verify Sign In Page Load and Form Display', 'expected_heading': 'Sign In', 'expected_subtitle': 'Enter your email and password to Sign in...!', 'expected_form_fields': ['Email', 'Password'], 'expected_elements': ['Keep me logged in', 'Forgot password?', 'Log In', 'Sign in with Google'], 'expected_result': 'Sign In page loads with all required elements'}}, {'TC_Reg_06': {'_comment': 'Verify User Login with Valid Credentials', 'email': 'john.doe.test__24@gmail.com', 'password': 'TestPass123__1', 'expected_result': 'User logged in successfully and redirected to home'}}, {'TC_Reg_07': {'_comment': 'Verify Google Sign Up Integration', 'action': 'google_signup', 'expected_result': 'User successfully registered via Google'}}, {'TC_Reg_08': {'_comment': 'Verify Google Sign In Integration', 'action': 'google_signin', 'expected_result': 'User successfully logged in via Google'}}, {'TC_Reg_09': {'_comment': 'Verify Navigation from Sign In to Create Account', 'link_text': 'Not registered yet?', 'create_account_link': 'Create an Account', 'expected_result': 'User navigated back to Sign Up page successfully'}}, {'TC_Reg_10': {'_comment': 'Verify Back Button Navigation', 'action': 'back_navigation', 'expected_result': 'User navigated back to previous page (homepage)'}}, {'TC_Reg_11': {'_comment': 'Verify Complete Authentication Flow End-to-End', 'fullname': 'Test User Flow', 'email': 'testflow@gmail.com', 'password': 'FlowTest123', 'confirm_password': 'FlowTest123', 'expected_result': 'User can complete entire authentication flow from homepage to dashboard'}}, {'TC_Reg_12': {'_comment': 'Verify Password Visibility Toggle', 'password': 'TestPassword123', 'action': 'toggle_password_visibility', 'expected_result': 'Password visibility toggles when eye icon clicked'}}, {'TC_Reg_13': {'_comment': 'Verify Keep Me Logged In Functionality', 'email': 'john.doe.test@gmail.com', 'password': 'TestPass123', 'keep_logged_in': True, 'expected_result': 'User remains logged in after browser restart'}}, {'TC_Reg_14': {'_comment': 'Verify Forgot Password Link Functionality', 'action': 'forgot_password', 'expected_result': 'User navigated to forgot password page'}}, {'TC_Reg_15': {'_comment': 'Verify Copyright Information Display', 'expected_copyright': 'Â© 2025 DOER Admission. All Rights Reserved.', 'expected_result': 'Copyright information is visible at page bottom'}}, {'TC_Reg_16': {'_comment': 'Verify Page Responsive Design', 'test_devices': ['desktop', 'mobile'], 'expected_result': 'All pages display properly on both devices'}}], 'validation_cases': [{'TC_Val_01': {'_comment': 'Verify registration fails with empty Full Name', 'fullname': '', 'email': 'test@test.com', 'password': '123456789', 'confirm_password': '123456789', 'expected_result': 'Please input your full name!'}}, {'TC_Val_02': {'_comment': 'Verify registration fails with empty Email', 'fullname': 'Test User', 'email': '', 'password': '123456789', 'confirm_password': '123456789', 'expected_result': 'Please fill out this field.'}}, {'TC_Val_03': {'_comment': 'Verify registration fails with invalid Email (without @)', 'fullname': 'Test User', 'email': 'test', 'password': '123456789', 'confirm_password': '123456789', 'expected_result': 'Please enter a valid email!'}}, {'TC_Val_04': {'_comment': 'Verify registration fails with invalid Email (incomplete after @)', 'fullname': 'Test User', 'email': 'test@', 'password': '123456789', 'confirm_password': '123456789', 'expected_result': \"Please enter a part following '@'. 'test@' is incomplete.\"}}, {'TC_Val_05': {'_comment': 'Verify registration fails with empty Password', 'fullname': 'Test User', 'email': 'test@test.com', 'password': '', 'confirm_password': '', 'expected_result': 'Please fill out this field.'}}, {'TC_Val_06': {'_comment': 'Verify registration fails with short Password (< 6 characters)', 'fullname': 'Test User', 'email': 'test@test.com', 'password': '12345', 'confirm_password': '12345', 'expected_result': 'Password must be at least 6 characters long.'}}, {'TC_Val_07': {'_comment': 'Verify registration fails with mismatched passwords', 'fullname': 'Test User', 'email': 'test@test.com', 'password': 'TestPass123', 'confirm_password': 'TestPass456', 'expected_result': 'The two passwords do not match!'}}], 'admission_portal': [{'TC_AD_01': {'_comment': 'Verify All Available Admissions Display on Main Page', 'expected_result': \"Admission cards are displayed with school names, class, session, and fees. The page also shows the message 'Showing ongoing admissions.'\"}}, {'TC_AD_02': {'_comment': 'Verify Admission Search by School Name Functionality', 'school_name': 'Test School', 'expected_result': 'Only Test School admissions are displayed'}}, {'TC_AD_03': {'_comment': 'Verify Admission Filter by Campus Functionality', 'campus': 'Test Campus', 'expected_result': 'Only admissions from Test Campus are shown'}}, {'TC_AD_04': {'_comment': 'Verify Admission Filter by Class Functionality', 'class': 'Four', 'expected_result': 'Only Class Four admissions are displayed'}}, {'TC_AD_05': {'_comment': 'Verify Admission Filter by Medium Functionality', 'medium': 'English', 'expected_result': 'Admissions are displayed only for the selected English medium'}}, {'TC_AD_06': {'_comment': 'Verify Clear All Filters Button Functionality', 'expected_result': 'All filters reset, all admissions visible again'}}, {'TC_AD_07': {'_comment': 'Verify Apply Now Button to Start Application', 'expected_result': 'Navigate to Student Information form'}}, {'TC_AD_08': {'_comment': 'Verify Admission Circular Download Functionality', 'expected_result': 'Circular PDF downloads successfully'}}], 'student_information': [{'TC_AD_09': {'_comment': 'Verify Student Personal Information Form with Valid Data', 'fullname': 'John Doe', 'gender': 'Male', 'date_of_birth': '2000-05-15', 'blood_group': 'A+', 'nationality': 'Bangladeshi', 'religion': 'Islam', 'contact': '01712345678', 'email': 'john@example.com', 'present_address': 'mohakhali', 'expected_result': 'All fields successfully accepted valid inputs without any errors'}}, {'TC_AD_10': {'_comment': 'Verify Student Personal Information Form Validation with Invalid Data', 'fullname': '', 'gender': 'Male', 'date_of_birth': '01/01/2010', 'blood_group': 'A+', 'nationality': 'Bangladeshi', 'religion': 'Islam', 'contact': '013', 'email': 'example.com', 'present_address': 'mohakhali', 'expected_result': 'Validation messages displayed correctly for empty or invalid fields'}}, {'TC_AD_11': {'_comment': 'Verify Student Additional Information Form and Navigation', 'fullname': 'john', 'gender': 'Female', 'date_of_birth': '02-01-2019', 'nationality': 'Bangladeshi', 'present_address': 'Mohakhali', 'siblings_in_school': 'Yes', 'sibling_name': 'jorina', 'relationship': 'Sister', 'current_class': 'One', 'roll_number': '1', 'admission_year': '2024', 'expected_result': 'Form saved successfully and user was redirected to the Guardian Information'}}], 'guardian_information': [{'TC_AD_12': {'_comment': 'Verify Guardian Information Form Submission with Valid Data (Required Fields Only)', 'father_fullname': 'kamal', 'father_contact': '01789571651', 'father_occupation': 'Businessman', 'father_nid': '1234567890', 'father_address': 'Dhaka', 'mother_fullname': 'jorina', 'mother_contact': '01789571652', 'mother_occupation': 'Housewife', 'mother_nid': '1234567890', 'mother_address': 'Dhaka', 'legal_guardian': 'Father', 'expected_result': 'Successfully added family information and navigate previous school information form'}}], 'previous_school': [{'TC_AD_13': {'_comment': 'Verify Previous School Academic Details Form Submission with Valid Data (Required Fields Only)', 'school_name': 'ABC Primary School', 'board_curriculum': 'National Curriculum', 'last_class': 'Three', 'school_address': '789 School Street', 'expected_result': 'Previous school information added successfully and user will navigate to document upload form'}}], 'document_upload': [{'TC_AD_14': {'_comment': 'Verify Required Document Upload with Valid Files', 'student_photo': 'C:\\\\Users\\\\sinth\\\\Documents\\\\photo.jpg', 'birth_certificate': 'C:\\\\Users\\\\sinth\\\\Documents\\\\photo.jpg', 'academic_records': 'C:\\\\Users\\\\sinth\\\\Documents\\\\photo.jpg', 'expected_result': 'Successfully upload all documents'}}], 'application_submission': [{'TC_AD_15': {'_comment': 'Verify Application Submission from Review Page', 'confirmation_checkbox': True, 'expected_result': \"System should display a confirmation message 'Application Form Completed!'. Popup should contain two options: 'Proceed to Payment' and 'Pay Later'. A note should be displayed: 'Your application will not be reviewed until the fee is paid.'\"}}, {'TC_AD_16': {'_comment': 'Verify Application Form Completion and Payment Prompt', 'confirmation_checkbox': True, 'expected_result': \"System should display a confirmation message 'Application Form Completed!'. Popup should contain two options: 'Proceed to Payment' and 'Pay Later'. A note should be displayed: 'Your application will not be reviewed until the fee is paid.'\"}}], 'payment': [{'TC_AD_18': {'_comment': 'Verify View Voucher Functionality', 'payment_method': 'Offline', 'expected_result': 'System should open the Payment Voucher page/document. Voucher should display: Application Number, Applicant/Student Name, Applied School Name, Application Fee Amount, Payment Instructions (Cash Payment at School Campus)'}}]}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"4036b302696b9e07.json","parameterValues":["{'registration': [{'TC_Reg_01': {'_comment': 'Verify Homepage Load and Sign Up Button Navigation', 'homepage_url': 'https://admission-test.doer.school/en', 'expected_heading': \"Your Child's Future Begins Here\", 'expected_stats': {'students': '20000+', 'guardians': '1643+', 'teachers': '7000+', 'schools': '2000+'}, 'expected_result': 'Homepage loads successfully and navigates to Sign Up page'}}, {'TC_Reg_02': {'_comment': 'Verify Sign Up Page Load and Form Display', 'expected_heading': 'Sign Up', 'expected_subtitle': 'Create your account to get started!', 'expected_form_fields': ['Full Name', 'Email', 'Password', 'Confirm Password'], 'expected_buttons': ['Sign Up', 'Sign up with Google'], 'expected_result': 'Sign Up page loads with all required form elements'}}, {'TC_Reg_03': {'_comment': 'Verify Complete User Registration with Valid Data', 'fullname': 'John Doe', 'email': 'john.doe.test__24@gmail.com', 'password': 'TestPass123__1', 'confirm_password': 'TestPass123__1', 'expected_result': 'Registration successful! Please log in with your credentials.'}}, {'TC_Reg_04': {'_comment': 'Verify Navigation from Sign Up to Sign In Page', 'link_text': 'Already have an account?', 'signin_link': 'Sign In', 'expected_result': 'User navigated to Sign In page successfully'}}, {'TC_Reg_05': {'_comment': 'Verify Sign In Page Load and Form Display', 'expected_heading': 'Sign In', 'expected_subtitle': 'Enter your email and password to Sign in...!', 'expected_form_fields': ['Email', 'Password'], 'expected_elements': ['Keep me logged in', 'Forgot password?', 'Log In', 'Sign in with Google'], 'expected_result': 'Sign In page loads with all required elements'}}, {'TC_Reg_06': {'_comment': 'Verify User Login with Valid Credentials', 'email': 'john.doe.test__24@gmail.com', 'password': 'TestPass123__1', 'expected_result': 'User logged in successfully and redirected to home'}}, {'TC_Reg_07': {'_comment': 'Verify Google Sign Up Integration', 'action': 'google_signup', 'expected_result': 'User successfully registered via Google'}}, {'TC_Reg_08': {'_comment': 'Verify Google Sign In Integration', 'action': 'google_signin', 'expected_result': 'User successfully logged in via Google'}}, {'TC_Reg_09': {'_comment': 'Verify Navigation from Sign In to Create Account', 'link_text': 'Not registered yet?', 'create_account_link': 'Create an Account', 'expected_result': 'User navigated back to Sign Up page successfully'}}, {'TC_Reg_10': {'_comment': 'Verify Back Button Navigation', 'action': 'back_navigation', 'expected_result': 'User navigated back to previous page (homepage)'}}, {'TC_Reg_11': {'_comment': 'Verify Complete Authentication Flow End-to-End', 'fullname': 'Test User Flow', 'email': 'testflow@gmail.com', 'password': 'FlowTest123', 'confirm_password': 'FlowTest123', 'expected_result': 'User can complete entire authentication flow from homepage to dashboard'}}, {'TC_Reg_12': {'_comment': 'Verify Password Visibility Toggle', 'password': 'TestPassword123', 'action': 'toggle_password_visibility', 'expected_result': 'Password visibility toggles when eye icon clicked'}}, {'TC_Reg_13': {'_comment': 'Verify Keep Me Logged In Functionality', 'email': 'john.doe.test@gmail.com', 'password': 'TestPass123', 'keep_logged_in': True, 'expected_result': 'User remains logged in after browser restart'}}, {'TC_Reg_14': {'_comment': 'Verify Forgot Password Link Functionality', 'action': 'forgot_password', 'expected_result': 'User navigated to forgot password page'}}, {'TC_Reg_15': {'_comment': 'Verify Copyright Information Display', 'expected_copyright': 'Â© 2025 DOER Admission. All Rights Reserved.', 'expected_result': 'Copyright information is visible at page bottom'}}, {'TC_Reg_16': {'_comment': 'Verify Page Responsive Design', 'test_devices': ['desktop', 'mobile'], 'expected_result': 'All pages display properly on both devices'}}], 'validation_cases': [{'TC_Val_01': {'_comment': 'Verify registration fails with empty Full Name', 'fullname': '', 'email': 'test@test.com', 'password': '123456789', 'confirm_password': '123456789', 'expected_result': 'Please input your full name!'}}, {'TC_Val_02': {'_comment': 'Verify registration fails with empty Email', 'fullname': 'Test User', 'email': '', 'password': '123456789', 'confirm_password': '123456789', 'expected_result': 'Please fill out this field.'}}, {'TC_Val_03': {'_comment': 'Verify registration fails with invalid Email (without @)', 'fullname': 'Test User', 'email': 'test', 'password': '123456789', 'confirm_password': '123456789', 'expected_result': 'Please enter a valid email!'}}, {'TC_Val_04': {'_comment': 'Verify registration fails with invalid Email (incomplete after @)', 'fullname': 'Test User', 'email': 'test@', 'password': '123456789', 'confirm_password': '123456789', 'expected_result': \"Please enter a part following '@'. 'test@' is incomplete.\"}}, {'TC_Val_05': {'_comment': 'Verify registration fails with empty Password', 'fullname': 'Test User', 'email': 'test@test.com', 'password': '', 'confirm_password': '', 'expected_result': 'Please fill out this field.'}}, {'TC_Val_06': {'_comment': 'Verify registration fails with short Password (< 6 characters)', 'fullname': 'Test User', 'email': 'test@test.com', 'password': '12345', 'confirm_password': '12345', 'expected_result': 'Password must be at least 6 characters long.'}}, {'TC_Val_07': {'_comment': 'Verify registration fails with mismatched passwords', 'fullname': 'Test User', 'email': 'test@test.com', 'password': 'TestPass123', 'confirm_password': 'TestPass456', 'expected_result': 'The two passwords do not match!'}}], 'admission_portal': [{'TC_AD_01': {'_comment': 'Verify All Available Admissions Display on Main Page', 'expected_result': \"Admission cards are displayed with school names, class, session, and fees. The page also shows the message 'Showing ongoing admissions.'\"}}, {'TC_AD_02': {'_comment': 'Verify Admission Search by School Name Functionality', 'school_name': 'Test School', 'expected_result': 'Only Test School admissions are displayed'}}, {'TC_AD_03': {'_comment': 'Verify Admission Filter by Campus Functionality', 'campus': 'Test Campus', 'expected_result': 'Only admissions from Test Campus are shown'}}, {'TC_AD_04': {'_comment': 'Verify Admission Filter by Class Functionality', 'class': 'Four', 'expected_result': 'Only Class Four admissions are displayed'}}, {'TC_AD_05': {'_comment': 'Verify Admission Filter by Medium Functionality', 'medium': 'English', 'expected_result': 'Admissions are displayed only for the selected English medium'}}, {'TC_AD_06': {'_comment': 'Verify Clear All Filters Button Functionality', 'expected_result': 'All filters reset, all admissions visible again'}}, {'TC_AD_07': {'_comment': 'Verify Apply Now Button to Start Application', 'expected_result': 'Navigate to Student Information form'}}, {'TC_AD_08': {'_comment': 'Verify Admission Circular Download Functionality', 'expected_result': 'Circular PDF downloads successfully'}}], 'student_information': [{'TC_AD_09': {'_comment': 'Verify Student Personal Information Form with Valid Data', 'fullname': 'John Doe', 'gender': 'Male', 'date_of_birth': '2000-05-15', 'blood_group': 'A+', 'nationality': 'Bangladeshi', 'religion': 'Islam', 'contact': '01712345678', 'email': 'john@example.com', 'present_address': 'mohakhali', 'expected_result': 'All fields successfully accepted valid inputs without any errors'}}, {'TC_AD_10': {'_comment': 'Verify Student Personal Information Form Validation with Invalid Data', 'fullname': '', 'gender': 'Male', 'date_of_birth': '01/01/2010', 'blood_group': 'A+', 'nationality': 'Bangladeshi', 'religion': 'Islam', 'contact': '013', 'email': 'example.com', 'present_address': 'mohakhali', 'expected_result': 'Validation messages displayed correctly for empty or invalid fields'}}, {'TC_AD_11': {'_comment': 'Verify Student Additional Information Form and Navigation', 'fullname': 'john', 'gender': 'Female', 'date_of_birth': '02-01-2019', 'nationality': 'Bangladeshi', 'present_address': 'Mohakhali', 'siblings_in_school': 'Yes', 'sibling_name': 'jorina', 'relationship': 'Sister', 'current_class': 'One', 'roll_number': '1', 'admission_year': '2024', 'expected_result': 'Form saved successfully and user was redirected to the Guardian Information'}}], 'guardian_information': [{'TC_AD_12': {'_comment': 'Verify Guardian Information Form Submission with Valid Data (Required Fields Only)', 'father_fullname': 'kamal', 'father_contact': '01789571651', 'father_occupation': 'Businessman', 'father_nid': '1234567890', 'father_address': 'Dhaka', 'mother_fullname': 'jorina', 'mother_contact': '01789571652', 'mother_occupation': 'Housewife', 'mother_nid': '1234567890', 'mother_address': 'Dhaka', 'legal_guardian': 'Father', 'expected_result': 'Successfully added family information and navigate previous school information form'}}], 'previous_school': [{'TC_AD_13': {'_comment': 'Verify Previous School Academic Details Form Submission with Valid Data (Required Fields Only)', 'school_name': 'ABC Primary School', 'board_curriculum': 'National Curriculum', 'last_class': 'Three', 'school_address': '789 School Street', 'expected_result': 'Previous school information added successfully and user will navigate to document upload form'}}], 'document_upload': [{'TC_AD_14': {'_comment': 'Verify Required Document Upload with Valid Files', 'student_photo': 'C:\\\\Users\\\\sinth\\\\Documents\\\\photo.jpg', 'birth_certificate': 'C:\\\\Users\\\\sinth\\\\Documents\\\\photo.jpg', 'academic_records': 'C:\\\\Users\\\\sinth\\\\Documents\\\\photo.jpg', 'expected_result': 'Successfully upload all documents'}}], 'application_submission': [{'TC_AD_15': {'_comment': 'Verify Application Submission from Review Page', 'confirmation_checkbox': True, 'expected_result': \"System should display a confirmation message 'Application Form Completed!'. Popup should contain two options: 'Proceed to Payment' and 'Pay Later'. A note should be displayed: 'Your application will not be reviewed until the fee is paid.'\"}}, {'TC_AD_16': {'_comment': 'Verify Application Form Completion and Payment Prompt', 'confirmation_checkbox': True, 'expected_result': \"System should display a confirmation message 'Application Form Completed!'. Popup should contain two options: 'Proceed to Payment' and 'Pay Later'. A note should be displayed: 'Your application will not be reviewed until the fee is paid.'\"}}], 'payment': [{'TC_AD_18': {'_comment': 'Verify View Voucher Functionality', 'payment_method': 'Offline', 'expected_result': 'System should open the Payment Voucher page/document. Voucher should display: Application Number, Applicant/Student Name, Applied School Name, Application Fee Amount, Payment Instructions (Cash Payment at School Campus)'}}]}"]}