{"name": "test_admission_complete_flow[test_case0]", "status": "failed", "statusDetails": {"message": "Failed: Failed to fill guardian information: Message: element click intercepted: Element is not clickable at point (730, 1378)\n  (Session info: chrome=139.0.7258.157); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#elementclickinterceptedexception\nStacktrace:\n\tGetHandleVerifier [0x0x7ff6dfdf3d85+79397]\n\tGetHandleVerifier [0x0x7ff6dfdf3de0+79488]\n\t(No symbol) [0x0x7ff6dfb9c0fa]\n\t(No symbol) [0x0x7ff6dfbfafd9]\n\t(No symbol) [0x0x7ff6dfbf8972]\n\t(No symbol) [0x0x7ff6dfbf59c1]\n\t(No symbol) [0x0x7ff6dfbf48b1]\n\t(No symbol) [0x0x7ff6dfbe60e8]\n\t(No symbol) [0x0x7ff6dfc1b19a]\n\t(No symbol) [0x0x7ff6dfbe5996]\n\t(No symbol) [0x0x7ff6dfc1b3b0]\n\t(No symbol) [0x0x7ff6dfc43344]\n\t(No symbol) [0x0x7ff6dfc1af73]\n\t(No symbol) [0x0x7ff6dfbe41b1]\n\t(No symbol) [0x0x7ff6dfbe4f43]\n\tGetHandleVerifier [0x0x7ff6e00be1ed+3005069]\n\tGetHandleVerifier [0x0x7ff6e00b831d+2980797]\n\tGetHandleVerifier [0x0x7ff6e00d7e0d+3110573]\n\tGetHandleVerifier [0x0x7ff6dfe0d6de+184190]\n\tGetHandleVerifier [0x0x7ff6dfe1516f+215567]\n\tGetHandleVerifier [0x0x7ff6dfdfc974+115220]\n\tGetHandleVerifier [0x0x7ff6dfdfcb29+115657]\n\tGetHandleVerifier [0x0x7ff6dfde3268+11016]\n\tBaseThreadInitThunk [0x0x7ffe7daee8d7+23]\n\tRtlUserThreadStart [0x0x7ffe7fcbc34c+44]", "trace": "browser_config = (<selenium.webdriver.chrome.webdriver.WebDriver (session=\"4efbf78f2bbf6295039fc4c9ab7540df\")>, <selenium.webdriver.support.wait.WebDriverWait (session=\"4efbf78f2bbf6295039fc4c9ab7540df\")>)\ntest_case = {'admission_portal': [{'TC_AD_01': {'_comment': 'Verify All Available Admissions Display on Main Page', 'expected_resu...nd navigate previous school information form', 'father_address': 'Dhaka', 'father_contact': '01789571651', ...}}], ...}\nself = None\n\n    @pytest.mark.parametrize(\"test_case\", load_all_test_data(\"../data/data.json\"))\n    def test_admission_complete_flow(browser_config, test_case, self=None):\n        \"\"\"\n        Comprehensive test covering the entire admission form flow:\n        - Login (if required)\n        - Student Information (TC_AD_09/TC_AD_10)\n        - Guardian Information (TC_AD_12)\n        - Document Upload (TC_AD_14)\n        - Application Review & Submission (TC_AD_15)\n        \"\"\"\n        logging.info(\"=== ADMISSION COMPLETE FLOW TEST STARTED ===\")\n    \n        driver, wait = browser_config\n        draft_id = None  # Track draft_id throughout the flow\n    \n        # Initialize page objects\n        admission_portal_page = AdmissionPortalPage(driver, wait)\n        student_info_page = StudentInformationPage(driver, wait)\n        guardian_info_page = GuardianInformationPage(driver, wait)\n        previous_school_page = PreviousSchoolPage(driver, wait)\n        document_upload_page = DocumentUploadPage(driver, wait)\n        application_review_page = ApplicationReviewPage(driver, wait)\n    \n        try:\n            # =============================================\n            # STEP 1: LOGIN (if login data is provided)\n            # =============================================\n            if \"registration\" in test_case and len(test_case[\"registration\"]) > 5:\n                logging.info(\"STEP 1: Performing Login...\")\n                login_data = test_case[\"registration\"][5][\"TC_Reg_06\"]\n    \n                try:\n                    perform_login(driver, wait, login_data, \"ADMISSION_FLOW\")\n                    logging.info(\"✅ Login completed successfully\")\n                    time.sleep(2)\n                except Exception as e:\n                    logging.error(f\"❌ Login failed: {str(e)}\")\n                    capture_full_page_screenshot(driver, \"admission_flow_login_failed\")\n                    pytest.fail(f\"Login failed: {str(e)}\")\n    \n            # =============================================\n            # STEP 2: NAVIGATE TO ADMISSION FORM\n            # =============================================\n            logging.info(\"STEP 2: Navigating to Admission Form...\")\n            time.sleep(3)\n    \n            try:\n                # Navigate to admission page if not already there\n                admission_portal_page.click_admission_navigation()\n                time.sleep(2)\n    \n    \n                admission_portal_page.click_apply_now_button()\n                logging.info(\"✅ Successfully navigated to admission form\")\n                time.sleep(2)\n            except Exception as e:\n                logging.error(f\"❌ Failed to navigate to admission form: {str(e)}\")\n                capture_full_page_screenshot(driver, \"admission_flow_navigation_failed\")\n                pytest.fail(f\"Failed to navigate to admission form: {str(e)}\")\n    \n            # =============================================\n            # STEP 3: STUDENT INFORMATION FORM\n            # =============================================\n            logging.info(\"STEP 3: Filling Student Information Form...\")\n    \n            # Use valid data (TC_AD_09) or invalid data (TC_AD_10) based on test case\n            if \"student_information\" in test_case and len(test_case[\"student_information\"]) > 0:\n                # Try TC_AD_09 first (valid data), fallback to TC_AD_10 (invalid data)\n                student_data = None\n                test_type = \"valid\"\n    \n                if \"TC_AD_09\" in test_case[\"student_information\"][0]:\n                    student_data = test_case[\"student_information\"][0][\"TC_AD_09\"]\n                    test_type = \"valid\"\n                elif len(test_case[\"student_information\"]) > 1 and \"TC_AD_10\" in test_case[\"student_information\"][1]:\n                    student_data = test_case[\"student_information\"][1][\"TC_AD_10\"]\n                    test_type = \"invalid\"\n    \n                if student_data:\n                    logging.info(f\"Using {test_type} student data: {student_data.get('_comment', '')}\")\n    \n                    # Fill student information form\n                    try:\n                        # Full Name\n                        student_info_page.enter_fullname(student_data[\"fullname\"])\n                        logging.info(f\"Full Name: '{student_data['fullname']}'\")\n    \n                        # Gender\n                        student_info_page.select_gender(student_data[\"gender\"])\n                        logging.info(f\"Gender: '{student_data['gender']}'\")\n    \n                        # Date of Birth\n                        student_info_page.enter_date_of_birth(student_data[\"date_of_birth\"])\n                        logging.info(f\"Date of Birth: '{student_data['date_of_birth']}'\")\n    \n                        # Blood Group (if available)\n                        # if \"blood_group\" in student_data:\n                        #     student_info_page.select_blood_group(student_data[\"blood_group\"])\n                        #     logging.info(f\"Blood Group: '{student_data['blood_group']}'\")\n    \n                        # Nationality\n                        student_info_page.select_nationality(student_data[\"nationality\"])\n                        logging.info(f\"Nationality: '{student_data['nationality']}'\")\n    \n                        # Religion\n                        student_info_page.select_religion(student_data[\"religion\"])\n                        logging.info(f\"Religion: '{student_data['religion']}'\")\n    \n                        # Contact\n                        student_info_page.enter_contact_number(student_data[\"contact\"])\n                        logging.info(f\"Contact: '{student_data['contact']}'\")\n    \n                        # Email\n                        student_info_page.enter_email(student_data[\"email\"])\n                        logging.info(f\"Email: '{student_data['email']}'\")\n    \n                        # Present Address\n                        student_info_page.enter_present_address(student_data[\"present_address\"])\n                        logging.info(f\"Present Address: '{student_data['present_address']}'\")\n    \n                        # Click Save & Continue\n                        student_info_page.click_save_continue_button()\n                        logging.info(\"Save & Continue button clicked\")\n                        time.sleep(3)\n    \n                        # Check for validation errors\n                        validation_errors = student_info_page.are_validation_errors_displayed()\n    \n                        if test_type == \"valid\":\n                            if validation_errors:\n                                logging.error(\"❌ Unexpected validation errors for valid data\")\n                                capture_full_page_screenshot(driver, \"admission_flow_unexpected_validation\")\n                                pytest.fail(\"Validation errors appeared for valid student data\")\n                            else:\n                                logging.info(\"✅ Student information saved successfully (valid data)\")\n                        else:\n                            if not validation_errors:\n                                logging.error(\"❌ Expected validation errors not displayed for invalid data\")\n                                capture_full_page_screenshot(driver, \"admission_flow_missing_validation\")\n                                pytest.fail(\"Expected validation errors for invalid student data\")\n                            else:\n                                logging.info(\"✅ Validation errors correctly displayed for invalid data\")\n                                # For invalid data, we stop here as form won't progress\n                                logging.info(\"=== ADMISSION FLOW TEST COMPLETED (Invalid Data Validation) ===\")\n                                return\n    \n                        # Extract draft_id from URL after successful submission\n                        current_url = driver.current_url\n                        draft_match = re.search(r'draft[_=](\\d+)', current_url)\n                        if draft_match:\n                            draft_id = draft_match.group(1)\n                            logging.info(f\"🔑 Draft ID captured: {draft_id}\")\n    \n                    except Exception as e:\n                        logging.error(f\"❌ Error filling student information: {str(e)}\")\n                        capture_full_page_screenshot(driver, \"admission_flow_student_info_error\")\n                        pytest.fail(f\"Failed to fill student information: {str(e)}\")\n    \n            # =============================================\n            # STEP 4: GUARDIAN INFORMATION FORM\n            # =============================================\n            logging.info(\"STEP 4: Filling Guardian Information Form...\")\n    \n            if \"guardian_information\" in test_case and len(test_case[\"guardian_information\"]) > 0:\n                guardian_data = test_case[\"guardian_information\"][0][\"TC_AD_12\"]\n                logging.info(f\"Guardian data: {guardian_data.get('_comment', '')}\")\n    \n                try:\n                    # Wait for guardian form to load\n                    time.sleep(1)\n    \n                    # Father Information\n                    guardian_info_page.enter_father_fullname(guardian_data[\"father_fullname\"])\n                    logging.info(f\"Father Full Name: '{guardian_data['father_fullname']}'\")\n    \n                    guardian_info_page.enter_father_contact(guardian_data[\"father_contact\"])\n                    logging.info(f\"Father Contact: '{guardian_data['father_contact']}'\")\n    \n                    guardian_info_page.enter_father_occupation(guardian_data[\"father_occupation\"])\n                    logging.info(f\"Father Occupation: '{guardian_data['father_occupation']}'\")\n    \n                    guardian_info_page.enter_father_nid(guardian_data[\"father_nid\"])\n                    logging.info(f\"Father NID: '{guardian_data['father_nid']}'\")\n    \n                    guardian_info_page.enter_father_address(guardian_data[\"father_address\"])\n                    logging.info(f\"Father Address: '{guardian_data['father_address']}'\")\n    \n                    # Mother Information\n                    guardian_info_page.enter_mother_fullname(guardian_data[\"mother_fullname\"])\n                    logging.info(f\"Mother Full Name: '{guardian_data['mother_fullname']}'\")\n    \n                    guardian_info_page.enter_mother_contact(guardian_data[\"mother_contact\"])\n                    logging.info(f\"Mother Contact: '{guardian_data['mother_contact']}'\")\n    \n                    guardian_info_page.enter_mother_occupation(guardian_data[\"mother_occupation\"])\n                    logging.info(f\"Mother Occupation: '{guardian_data['mother_occupation']}'\")\n    \n                    guardian_info_page.enter_mother_nid(guardian_data[\"mother_nid\"])\n                    logging.info(f\"Mother NID: '{guardian_data['mother_nid']}'\")\n    \n                    guardian_info_page.enter_mother_address(guardian_data[\"mother_address\"])\n                    logging.info(f\"Mother Address: '{guardian_data['mother_address']}'\")\n    \n                    # Legal Guardian\n>                   guardian_info_page.select_legal_guardian(guardian_data[\"legal_guardian\"])\n\ntests\\admission\\test_TC_AD_10.py:226: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\guardian_information_page.py:106: in select_legal_guardian\n    guardian_dropdown.click()\nC:\\Users\\sinth\\Downloads\\Movie_Ticket_Automation-master\\Movie_Ticket_Automation-master\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:120: in click\n    self._execute(Command.CLICK_ELEMENT)\nC:\\Users\\sinth\\Downloads\\Movie_Ticket_Automation-master\\Movie_Ticket_Automation-master\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:573: in _execute\n    return self._parent.execute(command, params)\nC:\\Users\\sinth\\Downloads\\Movie_Ticket_Automation-master\\Movie_Ticket_Automation-master\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:458: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001475FE22C10>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...ff6dfde3268+11016]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffe7daee8d7+23]\\\\n\\\\tRtlUserThreadStart [0x0x7ffe7fcbc34c+44]\\\\n\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\")\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (730, 1378)\nE         (Session info: chrome=139.0.7258.157); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#elementclickinterceptedexception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff6dfdf3d85+79397]\nE       \tGetHandleVerifier [0x0x7ff6dfdf3de0+79488]\nE       \t(No symbol) [0x0x7ff6dfb9c0fa]\nE       \t(No symbol) [0x0x7ff6dfbfafd9]\nE       \t(No symbol) [0x0x7ff6dfbf8972]\nE       \t(No symbol) [0x0x7ff6dfbf59c1]\nE       \t(No symbol) [0x0x7ff6dfbf48b1]\nE       \t(No symbol) [0x0x7ff6dfbe60e8]\nE       \t(No symbol) [0x0x7ff6dfc1b19a]\nE       \t(No symbol) [0x0x7ff6dfbe5996]\nE       \t(No symbol) [0x0x7ff6dfc1b3b0]\nE       \t(No symbol) [0x0x7ff6dfc43344]\nE       \t(No symbol) [0x0x7ff6dfc1af73]\nE       \t(No symbol) [0x0x7ff6dfbe41b1]\nE       \t(No symbol) [0x0x7ff6dfbe4f43]\nE       \tGetHandleVerifier [0x0x7ff6e00be1ed+3005069]\nE       \tGetHandleVerifier [0x0x7ff6e00b831d+2980797]\nE       \tGetHandleVerifier [0x0x7ff6e00d7e0d+3110573]\nE       \tGetHandleVerifier [0x0x7ff6dfe0d6de+184190]\nE       \tGetHandleVerifier [0x0x7ff6dfe1516f+215567]\nE       \tGetHandleVerifier [0x0x7ff6dfdfc974+115220]\nE       \tGetHandleVerifier [0x0x7ff6dfdfcb29+115657]\nE       \tGetHandleVerifier [0x0x7ff6dfde3268+11016]\nE       \tBaseThreadInitThunk [0x0x7ffe7daee8d7+23]\nE       \tRtlUserThreadStart [0x0x7ffe7fcbc34c+44]\n\nC:\\Users\\sinth\\Downloads\\Movie_Ticket_Automation-master\\Movie_Ticket_Automation-master\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\nbrowser_config = (<selenium.webdriver.chrome.webdriver.WebDriver (session=\"4efbf78f2bbf6295039fc4c9ab7540df\")>, <selenium.webdriver.support.wait.WebDriverWait (session=\"4efbf78f2bbf6295039fc4c9ab7540df\")>)\ntest_case = {'admission_portal': [{'TC_AD_01': {'_comment': 'Verify All Available Admissions Display on Main Page', 'expected_resu...nd navigate previous school information form', 'father_address': 'Dhaka', 'father_contact': '01789571651', ...}}], ...}\nself = None\n\n    @pytest.mark.parametrize(\"test_case\", load_all_test_data(\"../data/data.json\"))\n    def test_admission_complete_flow(browser_config, test_case, self=None):\n        \"\"\"\n        Comprehensive test covering the entire admission form flow:\n        - Login (if required)\n        - Student Information (TC_AD_09/TC_AD_10)\n        - Guardian Information (TC_AD_12)\n        - Document Upload (TC_AD_14)\n        - Application Review & Submission (TC_AD_15)\n        \"\"\"\n        logging.info(\"=== ADMISSION COMPLETE FLOW TEST STARTED ===\")\n    \n        driver, wait = browser_config\n        draft_id = None  # Track draft_id throughout the flow\n    \n        # Initialize page objects\n        admission_portal_page = AdmissionPortalPage(driver, wait)\n        student_info_page = StudentInformationPage(driver, wait)\n        guardian_info_page = GuardianInformationPage(driver, wait)\n        previous_school_page = PreviousSchoolPage(driver, wait)\n        document_upload_page = DocumentUploadPage(driver, wait)\n        application_review_page = ApplicationReviewPage(driver, wait)\n    \n        try:\n            # =============================================\n            # STEP 1: LOGIN (if login data is provided)\n            # =============================================\n            if \"registration\" in test_case and len(test_case[\"registration\"]) > 5:\n                logging.info(\"STEP 1: Performing Login...\")\n                login_data = test_case[\"registration\"][5][\"TC_Reg_06\"]\n    \n                try:\n                    perform_login(driver, wait, login_data, \"ADMISSION_FLOW\")\n                    logging.info(\"✅ Login completed successfully\")\n                    time.sleep(2)\n                except Exception as e:\n                    logging.error(f\"❌ Login failed: {str(e)}\")\n                    capture_full_page_screenshot(driver, \"admission_flow_login_failed\")\n                    pytest.fail(f\"Login failed: {str(e)}\")\n    \n            # =============================================\n            # STEP 2: NAVIGATE TO ADMISSION FORM\n            # =============================================\n            logging.info(\"STEP 2: Navigating to Admission Form...\")\n            time.sleep(3)\n    \n            try:\n                # Navigate to admission page if not already there\n                admission_portal_page.click_admission_navigation()\n                time.sleep(2)\n    \n    \n                admission_portal_page.click_apply_now_button()\n                logging.info(\"✅ Successfully navigated to admission form\")\n                time.sleep(2)\n            except Exception as e:\n                logging.error(f\"❌ Failed to navigate to admission form: {str(e)}\")\n                capture_full_page_screenshot(driver, \"admission_flow_navigation_failed\")\n                pytest.fail(f\"Failed to navigate to admission form: {str(e)}\")\n    \n            # =============================================\n            # STEP 3: STUDENT INFORMATION FORM\n            # =============================================\n            logging.info(\"STEP 3: Filling Student Information Form...\")\n    \n            # Use valid data (TC_AD_09) or invalid data (TC_AD_10) based on test case\n            if \"student_information\" in test_case and len(test_case[\"student_information\"]) > 0:\n                # Try TC_AD_09 first (valid data), fallback to TC_AD_10 (invalid data)\n                student_data = None\n                test_type = \"valid\"\n    \n                if \"TC_AD_09\" in test_case[\"student_information\"][0]:\n                    student_data = test_case[\"student_information\"][0][\"TC_AD_09\"]\n                    test_type = \"valid\"\n                elif len(test_case[\"student_information\"]) > 1 and \"TC_AD_10\" in test_case[\"student_information\"][1]:\n                    student_data = test_case[\"student_information\"][1][\"TC_AD_10\"]\n                    test_type = \"invalid\"\n    \n                if student_data:\n                    logging.info(f\"Using {test_type} student data: {student_data.get('_comment', '')}\")\n    \n                    # Fill student information form\n                    try:\n                        # Full Name\n                        student_info_page.enter_fullname(student_data[\"fullname\"])\n                        logging.info(f\"Full Name: '{student_data['fullname']}'\")\n    \n                        # Gender\n                        student_info_page.select_gender(student_data[\"gender\"])\n                        logging.info(f\"Gender: '{student_data['gender']}'\")\n    \n                        # Date of Birth\n                        student_info_page.enter_date_of_birth(student_data[\"date_of_birth\"])\n                        logging.info(f\"Date of Birth: '{student_data['date_of_birth']}'\")\n    \n                        # Blood Group (if available)\n                        # if \"blood_group\" in student_data:\n                        #     student_info_page.select_blood_group(student_data[\"blood_group\"])\n                        #     logging.info(f\"Blood Group: '{student_data['blood_group']}'\")\n    \n                        # Nationality\n                        student_info_page.select_nationality(student_data[\"nationality\"])\n                        logging.info(f\"Nationality: '{student_data['nationality']}'\")\n    \n                        # Religion\n                        student_info_page.select_religion(student_data[\"religion\"])\n                        logging.info(f\"Religion: '{student_data['religion']}'\")\n    \n                        # Contact\n                        student_info_page.enter_contact_number(student_data[\"contact\"])\n                        logging.info(f\"Contact: '{student_data['contact']}'\")\n    \n                        # Email\n                        student_info_page.enter_email(student_data[\"email\"])\n                        logging.info(f\"Email: '{student_data['email']}'\")\n    \n                        # Present Address\n                        student_info_page.enter_present_address(student_data[\"present_address\"])\n                        logging.info(f\"Present Address: '{student_data['present_address']}'\")\n    \n                        # Click Save & Continue\n                        student_info_page.click_save_continue_button()\n                        logging.info(\"Save & Continue button clicked\")\n                        time.sleep(3)\n    \n                        # Check for validation errors\n                        validation_errors = student_info_page.are_validation_errors_displayed()\n    \n                        if test_type == \"valid\":\n                            if validation_errors:\n                                logging.error(\"❌ Unexpected validation errors for valid data\")\n                                capture_full_page_screenshot(driver, \"admission_flow_unexpected_validation\")\n                                pytest.fail(\"Validation errors appeared for valid student data\")\n                            else:\n                                logging.info(\"✅ Student information saved successfully (valid data)\")\n                        else:\n                            if not validation_errors:\n                                logging.error(\"❌ Expected validation errors not displayed for invalid data\")\n                                capture_full_page_screenshot(driver, \"admission_flow_missing_validation\")\n                                pytest.fail(\"Expected validation errors for invalid student data\")\n                            else:\n                                logging.info(\"✅ Validation errors correctly displayed for invalid data\")\n                                # For invalid data, we stop here as form won't progress\n                                logging.info(\"=== ADMISSION FLOW TEST COMPLETED (Invalid Data Validation) ===\")\n                                return\n    \n                        # Extract draft_id from URL after successful submission\n                        current_url = driver.current_url\n                        draft_match = re.search(r'draft[_=](\\d+)', current_url)\n                        if draft_match:\n                            draft_id = draft_match.group(1)\n                            logging.info(f\"🔑 Draft ID captured: {draft_id}\")\n    \n                    except Exception as e:\n                        logging.error(f\"❌ Error filling student information: {str(e)}\")\n                        capture_full_page_screenshot(driver, \"admission_flow_student_info_error\")\n                        pytest.fail(f\"Failed to fill student information: {str(e)}\")\n    \n            # =============================================\n            # STEP 4: GUARDIAN INFORMATION FORM\n            # =============================================\n            logging.info(\"STEP 4: Filling Guardian Information Form...\")\n    \n            if \"guardian_information\" in test_case and len(test_case[\"guardian_information\"]) > 0:\n                guardian_data = test_case[\"guardian_information\"][0][\"TC_AD_12\"]\n                logging.info(f\"Guardian data: {guardian_data.get('_comment', '')}\")\n    \n                try:\n                    # Wait for guardian form to load\n                    time.sleep(1)\n    \n                    # Father Information\n                    guardian_info_page.enter_father_fullname(guardian_data[\"father_fullname\"])\n                    logging.info(f\"Father Full Name: '{guardian_data['father_fullname']}'\")\n    \n                    guardian_info_page.enter_father_contact(guardian_data[\"father_contact\"])\n                    logging.info(f\"Father Contact: '{guardian_data['father_contact']}'\")\n    \n                    guardian_info_page.enter_father_occupation(guardian_data[\"father_occupation\"])\n                    logging.info(f\"Father Occupation: '{guardian_data['father_occupation']}'\")\n    \n                    guardian_info_page.enter_father_nid(guardian_data[\"father_nid\"])\n                    logging.info(f\"Father NID: '{guardian_data['father_nid']}'\")\n    \n                    guardian_info_page.enter_father_address(guardian_data[\"father_address\"])\n                    logging.info(f\"Father Address: '{guardian_data['father_address']}'\")\n    \n                    # Mother Information\n                    guardian_info_page.enter_mother_fullname(guardian_data[\"mother_fullname\"])\n                    logging.info(f\"Mother Full Name: '{guardian_data['mother_fullname']}'\")\n    \n                    guardian_info_page.enter_mother_contact(guardian_data[\"mother_contact\"])\n                    logging.info(f\"Mother Contact: '{guardian_data['mother_contact']}'\")\n    \n                    guardian_info_page.enter_mother_occupation(guardian_data[\"mother_occupation\"])\n                    logging.info(f\"Mother Occupation: '{guardian_data['mother_occupation']}'\")\n    \n                    guardian_info_page.enter_mother_nid(guardian_data[\"mother_nid\"])\n                    logging.info(f\"Mother NID: '{guardian_data['mother_nid']}'\")\n    \n                    guardian_info_page.enter_mother_address(guardian_data[\"mother_address\"])\n                    logging.info(f\"Mother Address: '{guardian_data['mother_address']}'\")\n    \n                    # Legal Guardian\n                    guardian_info_page.select_legal_guardian(guardian_data[\"legal_guardian\"])\n                    logging.info(f\"Legal Guardian: '{guardian_data['legal_guardian']}'\")\n    \n                    # Click Save & Continue\n                    guardian_info_page.click_save_continue_button()\n                    logging.info(\"Save & Continue button clicked\")\n    \n                    time.sleep(1)\n    \n                    success_message = guardian_info_page.get_success_message()\n                    if success_message == \"Family information added successfully.\":\n                        logging.info(\"Family information added successfully.\")\n                    else:\n                        logging.error(f\"Previous school information error: {success_message}\")\n                        pytest.fail(f\"Previous school information error: {success_message}\")\n    \n    \n                except Exception as e:\n                    logging.error(f\"❌ Error filling guardian information: {str(e)}\")\n                    capture_full_page_screenshot(driver, \"admission_flow_guardian_error\")\n>                   pytest.fail(f\"Failed to fill guardian information: {str(e)}\")\nE                   Failed: Failed to fill guardian information: Message: element click intercepted: Element is not clickable at point (730, 1378)\nE                     (Session info: chrome=139.0.7258.157); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#elementclickinterceptedexception\nE                   Stacktrace:\nE                   \tGetHandleVerifier [0x0x7ff6dfdf3d85+79397]\nE                   \tGetHandleVerifier [0x0x7ff6dfdf3de0+79488]\nE                   \t(No symbol) [0x0x7ff6dfb9c0fa]\nE                   \t(No symbol) [0x0x7ff6dfbfafd9]\nE                   \t(No symbol) [0x0x7ff6dfbf8972]\nE                   \t(No symbol) [0x0x7ff6dfbf59c1]\nE                   \t(No symbol) [0x0x7ff6dfbf48b1]\nE                   \t(No symbol) [0x0x7ff6dfbe60e8]\nE                   \t(No symbol) [0x0x7ff6dfc1b19a]\nE                   \t(No symbol) [0x0x7ff6dfbe5996]\nE                   \t(No symbol) [0x0x7ff6dfc1b3b0]\nE                   \t(No symbol) [0x0x7ff6dfc43344]\nE                   \t(No symbol) [0x0x7ff6dfc1af73]\nE                   \t(No symbol) [0x0x7ff6dfbe41b1]\nE                   \t(No symbol) [0x0x7ff6dfbe4f43]\nE                   \tGetHandleVerifier [0x0x7ff6e00be1ed+3005069]\nE                   \tGetHandleVerifier [0x0x7ff6e00b831d+2980797]\nE                   \tGetHandleVerifier [0x0x7ff6e00d7e0d+3110573]\nE                   \tGetHandleVerifier [0x0x7ff6dfe0d6de+184190]\nE                   \tGetHandleVerifier [0x0x7ff6dfe1516f+215567]\nE                   \tGetHandleVerifier [0x0x7ff6dfdfc974+115220]\nE                   \tGetHandleVerifier [0x0x7ff6dfdfcb29+115657]\nE                   \tGetHandleVerifier [0x0x7ff6dfde3268+11016]\nE                   \tBaseThreadInitThunk [0x0x7ffe7daee8d7+23]\nE                   \tRtlUserThreadStart [0x0x7ffe7fcbc34c+44]\n\ntests\\admission\\test_TC_AD_10.py:246: Failed"}, "description": "\nComprehensive test covering the entire admission form flow:\n- Login (if required)\n- Student Information (TC_AD_09/TC_AD_10)\n- Guardian Information (TC_AD_12)\n- Document Upload (TC_AD_14)\n- Application Review & Submission (TC_AD_15)\n", "attachments": [{"name": "log", "source": "ac593fd6-21da-464d-9717-878695580498-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "1736a90c-d8cc-49ab-b48f-87311b19d73e-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "test_case", "value": "{'registration': [{'TC_Reg_01': {'_comment': 'Verify Homepage Load and Sign Up Button Navigation', 'homepage_url': 'https://admission-test.doer.school/en', 'expected_heading': \"Your Child's Future Begins Here\", 'expected_stats': {'students': '20000+', 'guardians': '1643+', 'teachers': '7000+', 'schools': '2000+'}, 'expected_result': 'Homepage loads successfully and navigates to Sign Up page'}}, {'TC_Reg_02': {'_comment': 'Verify Sign Up Page Load and Form Display', 'expected_heading': 'Sign Up', 'expected_subtitle': 'Create your account to get started!', 'expected_form_fields': ['Full Name', 'Email', 'Password', 'Confirm Password'], 'expected_buttons': ['Sign Up', 'Sign up with Google'], 'expected_result': 'Sign Up page loads with all required form elements'}}, {'TC_Reg_03': {'_comment': 'Verify Complete User Registration with Valid Data', 'fullname': 'John Doe', 'email': 'john.doe.test__23@gmail.com', 'password': 'TestPass123__1', 'confirm_password': 'TestPass123__1', 'expected_result': 'Registration successful! Please log in with your credentials.'}}, {'TC_Reg_04': {'_comment': 'Verify Navigation from Sign Up to Sign In Page', 'link_text': 'Already have an account?', 'signin_link': 'Sign In', 'expected_result': 'User navigated to Sign In page successfully'}}, {'TC_Reg_05': {'_comment': 'Verify Sign In Page Load and Form Display', 'expected_heading': 'Sign In', 'expected_subtitle': 'Enter your email and password to Sign in...!', 'expected_form_fields': ['Email', 'Password'], 'expected_elements': ['Keep me logged in', 'Forgot password?', 'Log In', 'Sign in with Google'], 'expected_result': 'Sign In page loads with all required elements'}}, {'TC_Reg_06': {'_comment': 'Verify User Login with Valid Credentials', 'email': 'john.doe.test__23@gmail.com', 'password': 'TestPass123__1', 'expected_result': 'User logged in successfully and redirected to home'}}, {'TC_Reg_07': {'_comment': 'Verify Google Sign Up Integration', 'action': 'google_signup', 'expected_result': 'User successfully registered via Google'}}, {'TC_Reg_08': {'_comment': 'Verify Google Sign In Integration', 'action': 'google_signin', 'expected_result': 'User successfully logged in via Google'}}, {'TC_Reg_09': {'_comment': 'Verify Navigation from Sign In to Create Account', 'link_text': 'Not registered yet?', 'create_account_link': 'Create an Account', 'expected_result': 'User navigated back to Sign Up page successfully'}}, {'TC_Reg_10': {'_comment': 'Verify Back Button Navigation', 'action': 'back_navigation', 'expected_result': 'User navigated back to previous page (homepage)'}}, {'TC_Reg_11': {'_comment': 'Verify Complete Authentication Flow End-to-End', 'fullname': 'Test User Flow', 'email': 'testflow@gmail.com', 'password': 'FlowTest123', 'confirm_password': 'FlowTest123', 'expected_result': 'User can complete entire authentication flow from homepage to dashboard'}}, {'TC_Reg_12': {'_comment': 'Verify Password Visibility Toggle', 'password': 'TestPassword123', 'action': 'toggle_password_visibility', 'expected_result': 'Password visibility toggles when eye icon clicked'}}, {'TC_Reg_13': {'_comment': 'Verify Keep Me Logged In Functionality', 'email': 'john.doe.test@gmail.com', 'password': 'TestPass123', 'keep_logged_in': True, 'expected_result': 'User remains logged in after browser restart'}}, {'TC_Reg_14': {'_comment': 'Verify Forgot Password Link Functionality', 'action': 'forgot_password', 'expected_result': 'User navigated to forgot password page'}}, {'TC_Reg_15': {'_comment': 'Verify Copyright Information Display', 'expected_copyright': 'Â© 2025 DOER Admission. All Rights Reserved.', 'expected_result': 'Copyright information is visible at page bottom'}}, {'TC_Reg_16': {'_comment': 'Verify Page Responsive Design', 'test_devices': ['desktop', 'mobile'], 'expected_result': 'All pages display properly on both devices'}}], 'validation_cases': [{'TC_Val_01': {'_comment': 'Verify registration fails with empty Full Name', 'fullname': '', 'email': 'test@test.com', 'password': '123456789', 'confirm_password': '123456789', 'expected_result': 'Please input your full name!'}}, {'TC_Val_02': {'_comment': 'Verify registration fails with empty Email', 'fullname': 'Test User', 'email': '', 'password': '123456789', 'confirm_password': '123456789', 'expected_result': 'Please fill out this field.'}}, {'TC_Val_03': {'_comment': 'Verify registration fails with invalid Email (without @)', 'fullname': 'Test User', 'email': 'test', 'password': '123456789', 'confirm_password': '123456789', 'expected_result': 'Please enter a valid email!'}}, {'TC_Val_04': {'_comment': 'Verify registration fails with invalid Email (incomplete after @)', 'fullname': 'Test User', 'email': 'test@', 'password': '123456789', 'confirm_password': '123456789', 'expected_result': \"Please enter a part following '@'. 'test@' is incomplete.\"}}, {'TC_Val_05': {'_comment': 'Verify registration fails with empty Password', 'fullname': 'Test User', 'email': 'test@test.com', 'password': '', 'confirm_password': '', 'expected_result': 'Please fill out this field.'}}, {'TC_Val_06': {'_comment': 'Verify registration fails with short Password (< 6 characters)', 'fullname': 'Test User', 'email': 'test@test.com', 'password': '12345', 'confirm_password': '12345', 'expected_result': 'Password must be at least 6 characters long.'}}, {'TC_Val_07': {'_comment': 'Verify registration fails with mismatched passwords', 'fullname': 'Test User', 'email': 'test@test.com', 'password': 'TestPass123', 'confirm_password': 'TestPass456', 'expected_result': 'The two passwords do not match!'}}], 'admission_portal': [{'TC_AD_01': {'_comment': 'Verify All Available Admissions Display on Main Page', 'expected_result': \"Admission cards are displayed with school names, class, session, and fees. The page also shows the message 'Showing ongoing admissions.'\"}}, {'TC_AD_02': {'_comment': 'Verify Admission Search by School Name Functionality', 'school_name': 'Test School', 'expected_result': 'Only Test School admissions are displayed'}}, {'TC_AD_03': {'_comment': 'Verify Admission Filter by Campus Functionality', 'campus': 'Test Campus', 'expected_result': 'Only admissions from Test Campus are shown'}}, {'TC_AD_04': {'_comment': 'Verify Admission Filter by Class Functionality', 'class': 'Four', 'expected_result': 'Only Class Four admissions are displayed'}}, {'TC_AD_05': {'_comment': 'Verify Admission Filter by Medium Functionality', 'medium': 'English', 'expected_result': 'Admissions are displayed only for the selected English medium'}}, {'TC_AD_06': {'_comment': 'Verify Clear All Filters Button Functionality', 'expected_result': 'All filters reset, all admissions visible again'}}, {'TC_AD_07': {'_comment': 'Verify Apply Now Button to Start Application', 'expected_result': 'Navigate to Student Information form'}}, {'TC_AD_08': {'_comment': 'Verify Admission Circular Download Functionality', 'expected_result': 'Circular PDF downloads successfully'}}], 'student_information': [{'TC_AD_09': {'_comment': 'Verify Student Personal Information Form with Valid Data', 'fullname': 'John Doe', 'gender': 'Male', 'date_of_birth': '2000-05-15', 'blood_group': 'A+', 'nationality': 'Bangladeshi', 'religion': 'Islam', 'contact': '01712345678', 'email': 'john@example.com', 'present_address': 'mohakhali', 'expected_result': 'All fields successfully accepted valid inputs without any errors'}}, {'TC_AD_10': {'_comment': 'Verify Student Personal Information Form Validation with Invalid Data', 'fullname': '', 'gender': 'Male', 'date_of_birth': '01/01/2010', 'blood_group': 'A+', 'nationality': 'Bangladeshi', 'religion': 'Islam', 'contact': '013', 'email': 'example.com', 'present_address': 'mohakhali', 'expected_result': 'Validation messages displayed correctly for empty or invalid fields'}}, {'TC_AD_11': {'_comment': 'Verify Student Additional Information Form and Navigation', 'fullname': 'john', 'gender': 'Female', 'date_of_birth': '02-01-2019', 'nationality': 'Bangladeshi', 'present_address': 'Mohakhali', 'siblings_in_school': 'Yes', 'sibling_name': 'jorina', 'relationship': 'Sister', 'current_class': 'One', 'roll_number': '1', 'admission_year': '2024', 'expected_result': 'Form saved successfully and user was redirected to the Guardian Information'}}], 'guardian_information': [{'TC_AD_12': {'_comment': 'Verify Guardian Information Form Submission with Valid Data (Required Fields Only)', 'father_fullname': 'kamal', 'father_contact': '01789571651', 'father_occupation': 'Businessman', 'father_nid': '1234567890', 'father_address': 'Dhaka', 'mother_fullname': 'jorina', 'mother_contact': '01789571652', 'mother_occupation': 'Housewife', 'mother_nid': '1234567890', 'mother_address': 'Dhaka', 'legal_guardian': 'Father', 'expected_result': 'Successfully added family information and navigate previous school information form'}}], 'previous_school': [{'TC_AD_13': {'_comment': 'Verify Previous School Academic Details Form Submission with Valid Data (Required Fields Only)', 'school_name': 'ABC Primary School', 'board_curriculum': 'National Curriculum', 'last_class': 'Three', 'school_address': '789 School Street', 'expected_result': 'Previous school information added successfully and user will navigate to document upload form'}}], 'document_upload': [{'TC_AD_14': {'_comment': 'Verify Required Document Upload with Valid Files', 'student_photo': 'C:\\\\Users\\\\sinth\\\\Documents\\\\photo.jpg', 'birth_certificate': 'C:\\\\Users\\\\sinth\\\\Documents\\\\photo.jpg', 'academic_records': 'C:\\\\Users\\\\sinth\\\\Documents\\\\photo.jpg', 'expected_result': 'Successfully upload all documents'}}], 'application_submission': [{'TC_AD_15': {'_comment': 'Verify Application Submission from Review Page', 'confirmation_checkbox': True, 'expected_result': \"System should display a confirmation message 'Application Form Completed!'. Popup should contain two options: 'Proceed to Payment' and 'Pay Later'. A note should be displayed: 'Your application will not be reviewed until the fee is paid.'\"}}, {'TC_AD_16': {'_comment': 'Verify Application Form Completion and Payment Prompt', 'confirmation_checkbox': True, 'expected_result': \"System should display a confirmation message 'Application Form Completed!'. Popup should contain two options: 'Proceed to Payment' and 'Pay Later'. A note should be displayed: 'Your application will not be reviewed until the fee is paid.'\"}}], 'payment': [{'TC_AD_18': {'_comment': 'Verify View Voucher Functionality', 'payment_method': 'Offline', 'expected_result': 'System should open the Payment Voucher page/document. Voucher should display: Application Number, Applicant/Student Name, Applied School Name, Application Fee Amount, Payment Instructions (Cash Payment at School Campus)'}}]}"}], "start": 1757502680197, "stop": 1757502729766, "uuid": "f008aa06-99c0-46a6-8381-1bb50d51a7b7", "historyId": "50b9f9912c13f2eaa8d4e3af0230f9d4", "testCaseId": "9452aac3e839211af4d84a20a66481a0", "fullName": "tests.admission.test_TC_AD_10#test_admission_complete_flow", "labels": [{"name": "parentSuite", "value": "tests.admission"}, {"name": "suite", "value": "test_TC_AD_10"}, {"name": "host", "value": "prapti"}, {"name": "thread", "value": "5652-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.admission.test_TC_AD_10"}], "titlePath": ["tests", "admission", "test_TC_AD_10.py"]}