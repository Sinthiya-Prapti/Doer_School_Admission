{"name": "test_tc_ad_18[test_case0]", "status": "failed", "statusDetails": {"message": "Failed: Test Failed. Failed to select offline payment method: Message: \nStacktrace:\n\tGetHandleVerifier [0x0x7ff6dfdf3d85+79397]\n\tGetHandleVerifier [0x0x7ff6dfdf3de0+79488]\n\t(No symbol) [0x0x7ff6dfb9c0fa]\n\t(No symbol) [0x0x7ff6dfbf2fd6]\n\t(No symbol) [0x0x7ff6dfbf328c]\n\t(No symbol) [0x0x7ff6dfc46537]\n\t(No symbol) [0x0x7ff6dfc1b1df]\n\t(No symbol) [0x0x7ff6dfc43344]\n\t(No symbol) [0x0x7ff6dfc1af73]\n\t(No symbol) [0x0x7ff6dfbe41b1]\n\t(No symbol) [0x0x7ff6dfbe4f43]\n\tGetHandleVerifier [0x0x7ff6e00be1ed+3005069]\n\tGetHandleVerifier [0x0x7ff6e00b831d+2980797]\n\tGetHandleVerifier [0x0x7ff6e00d7e0d+3110573]\n\tGetHandleVerifier [0x0x7ff6dfe0d6de+184190]\n\tGetHandleVerifier [0x0x7ff6dfe1516f+215567]\n\tGetHandleVerifier [0x0x7ff6dfdfc974+115220]\n\tGetHandleVerifier [0x0x7ff6dfdfcb29+115657]\n\tGetHandleVerifier [0x0x7ff6dfde3268+11016]\n\tBaseThreadInitThunk [0x0x7ffe7daee8d7+23]\n\tRtlUserThreadStart [0x0x7ffe7fcbc34c+44]", "trace": "browser_config = (<selenium.webdriver.chrome.webdriver.WebDriver (session=\"0fec61cc0bce57d8a8d6966338d90f2b\")>, <selenium.webdriver.support.wait.WebDriverWait (session=\"0fec61cc0bce57d8a8d6966338d90f2b\")>)\ntest_case = {'admission_portal': [{'TC_AD_01': {'_comment': 'Verify All Available Admissions Display on Main Page', 'expected_resu...nd navigate previous school information form', 'father_address': 'Dhaka', 'father_contact': '01789571651', ...}}], ...}\n\n    @pytest.mark.parametrize(\"test_case\", load_all_test_data(\"../data/data_admission.json\"))\n    def test_tc_ad_18(browser_config, test_case):\n        logging.info(\"TC_AD_18 Started..\")\n        logging.info(test_case[\"payment\"][0][\"TC_AD_18\"][\"_comment\"])\n    \n        driver, wait = browser_config\n    \n        # Create object for PaymentPage class\n        payment_page = PaymentPage(driver, wait)\n    \n        try:\n            # Note: This test assumes user has reached the Payment Page after completing\n            # the application form. In a real scenario, we would need to navigate through\n            # all previous forms or have a direct way to reach payment page.\n    \n            # Wait for payment page to load\n            time.sleep(3)\n    \n            # Get test data\n            test_data = test_case[\"payment\"][0][\"TC_AD_18\"]\n            payment_method = test_data[\"payment_method\"]\n    \n            # 1. Ensure Offline payment option is selected\n            try:\n>               payment_page.select_offline_payment_method()\n\ntests\\admission\\test_TC_AD_18.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\payment_page.py:12: in select_offline_payment_method\n    offline_payment_radio = self.wait.until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"0fec61cc0bce57d8a8d6966338d90f2b\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x00000216689F40E0>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff6dfdf3d85+79397]\nE       \tGetHandleVerifier [0x0x7ff6dfdf3de0+79488]\nE       \t(No symbol) [0x0x7ff6dfb9c0fa]\nE       \t(No symbol) [0x0x7ff6dfbf2fd6]\nE       \t(No symbol) [0x0x7ff6dfbf328c]\nE       \t(No symbol) [0x0x7ff6dfc46537]\nE       \t(No symbol) [0x0x7ff6dfc1b1df]\nE       \t(No symbol) [0x0x7ff6dfc43344]\nE       \t(No symbol) [0x0x7ff6dfc1af73]\nE       \t(No symbol) [0x0x7ff6dfbe41b1]\nE       \t(No symbol) [0x0x7ff6dfbe4f43]\nE       \tGetHandleVerifier [0x0x7ff6e00be1ed+3005069]\nE       \tGetHandleVerifier [0x0x7ff6e00b831d+2980797]\nE       \tGetHandleVerifier [0x0x7ff6e00d7e0d+3110573]\nE       \tGetHandleVerifier [0x0x7ff6dfe0d6de+184190]\nE       \tGetHandleVerifier [0x0x7ff6dfe1516f+215567]\nE       \tGetHandleVerifier [0x0x7ff6dfdfc974+115220]\nE       \tGetHandleVerifier [0x0x7ff6dfdfcb29+115657]\nE       \tGetHandleVerifier [0x0x7ff6dfde3268+11016]\nE       \tBaseThreadInitThunk [0x0x7ffe7daee8d7+23]\nE       \tRtlUserThreadStart [0x0x7ffe7fcbc34c+44]\n\nC:\\Users\\sinth\\Downloads\\Movie_Ticket_Automation-master\\Movie_Ticket_Automation-master\\.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nbrowser_config = (<selenium.webdriver.chrome.webdriver.WebDriver (session=\"0fec61cc0bce57d8a8d6966338d90f2b\")>, <selenium.webdriver.support.wait.WebDriverWait (session=\"0fec61cc0bce57d8a8d6966338d90f2b\")>)\ntest_case = {'admission_portal': [{'TC_AD_01': {'_comment': 'Verify All Available Admissions Display on Main Page', 'expected_resu...nd navigate previous school information form', 'father_address': 'Dhaka', 'father_contact': '01789571651', ...}}], ...}\n\n    @pytest.mark.parametrize(\"test_case\", load_all_test_data(\"../data/data_admission.json\"))\n    def test_tc_ad_18(browser_config, test_case):\n        logging.info(\"TC_AD_18 Started..\")\n        logging.info(test_case[\"payment\"][0][\"TC_AD_18\"][\"_comment\"])\n    \n        driver, wait = browser_config\n    \n        # Create object for PaymentPage class\n        payment_page = PaymentPage(driver, wait)\n    \n        try:\n            # Note: This test assumes user has reached the Payment Page after completing\n            # the application form. In a real scenario, we would need to navigate through\n            # all previous forms or have a direct way to reach payment page.\n    \n            # Wait for payment page to load\n            time.sleep(3)\n    \n            # Get test data\n            test_data = test_case[\"payment\"][0][\"TC_AD_18\"]\n            payment_method = test_data[\"payment_method\"]\n    \n            # 1. Ensure Offline payment option is selected\n            try:\n                payment_page.select_offline_payment_method()\n                logging.info(f\"'{payment_method}' payment method selected successfully.\")\n            except Exception as e:\n                logging.error(f\"Failed to select offline payment method: {str(e)}\")\n                capture_full_page_screenshot(driver, \"TC_AD_18_payment_method_error\")\n>               pytest.fail(f\"Test Failed. Failed to select offline payment method: {str(e)}\")\nE               Failed: Test Failed. Failed to select offline payment method: Message: \nE               Stacktrace:\nE               \tGetHandleVerifier [0x0x7ff6dfdf3d85+79397]\nE               \tGetHandleVerifier [0x0x7ff6dfdf3de0+79488]\nE               \t(No symbol) [0x0x7ff6dfb9c0fa]\nE               \t(No symbol) [0x0x7ff6dfbf2fd6]\nE               \t(No symbol) [0x0x7ff6dfbf328c]\nE               \t(No symbol) [0x0x7ff6dfc46537]\nE               \t(No symbol) [0x0x7ff6dfc1b1df]\nE               \t(No symbol) [0x0x7ff6dfc43344]\nE               \t(No symbol) [0x0x7ff6dfc1af73]\nE               \t(No symbol) [0x0x7ff6dfbe41b1]\nE               \t(No symbol) [0x0x7ff6dfbe4f43]\nE               \tGetHandleVerifier [0x0x7ff6e00be1ed+3005069]\nE               \tGetHandleVerifier [0x0x7ff6e00b831d+2980797]\nE               \tGetHandleVerifier [0x0x7ff6e00d7e0d+3110573]\nE               \tGetHandleVerifier [0x0x7ff6dfe0d6de+184190]\nE               \tGetHandleVerifier [0x0x7ff6dfe1516f+215567]\nE               \tGetHandleVerifier [0x0x7ff6dfdfc974+115220]\nE               \tGetHandleVerifier [0x0x7ff6dfdfcb29+115657]\nE               \tGetHandleVerifier [0x0x7ff6dfde3268+11016]\nE               \tBaseThreadInitThunk [0x0x7ffe7daee8d7+23]\nE               \tRtlUserThreadStart [0x0x7ffe7fcbc34c+44]\n\ntests\\admission\\test_TC_AD_18.py:38: Failed"}, "attachments": [{"name": "log", "source": "f45cfbaa-9ae3-4f6c-938d-2943c9122998-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "test_case", "value": "{'admission_portal': [{'TC_AD_01': {'_comment': 'Verify All Available Admissions Display on Main Page', 'expected_result': \"Admission cards are displayed with school names, class, session, and fees. The page also shows the message 'Showing ongoing admissions.'\"}}, {'TC_AD_02': {'_comment': 'Verify Admission Search by School Name Functionality', 'school_name': 'Test School', 'expected_result': 'Only Test School admissions are displayed'}}, {'TC_AD_03': {'_comment': 'Verify Admission Filter by Campus Functionality', 'campus': 'Test Campus', 'expected_result': 'Only admissions from Test Campus are shown'}}, {'TC_AD_04': {'_comment': 'Verify Admission Filter by Class Functionality', 'class': 'Four', 'expected_result': 'Only Class Four admissions are displayed'}}, {'TC_AD_05': {'_comment': 'Verify Admission Filter by Medium Functionality', 'medium': 'English', 'expected_result': 'Admissions are displayed only for the selected English medium'}}, {'TC_AD_06': {'_comment': 'Verify Clear All Filters Button Functionality', 'expected_result': 'All filters reset, all admissions visible again'}}, {'TC_AD_07': {'_comment': 'Verify Apply Now Button to Start Application', 'expected_result': 'Navigate to Student Information form'}}, {'TC_AD_08': {'_comment': 'Verify Admission Circular Download Functionality', 'expected_result': 'Circular PDF downloads successfully'}}], 'student_information': [{'TC_AD_09': {'_comment': 'Verify Student Personal Information Form with Valid Data', 'fullname': 'John Doe', 'gender': 'Male', 'date_of_birth': '2000-05-15', 'blood_group': 'A+', 'nationality': 'Bangladeshi', 'religion': 'Islam', 'contact': '01712345678', 'email': 'john@example.com', 'present_address': 'mohakhali', 'expected_result': 'All fields successfully accepted valid inputs without any errors'}}, {'TC_AD_10': {'_comment': 'Verify Student Personal Information Form Validation with Invalid Data', 'fullname': '', 'gender': 'Male', 'date_of_birth': '01/01/2010', 'blood_group': 'A+', 'nationality': 'Bangladeshi', 'religion': 'Islam', 'contact': '013', 'email': 'example.com', 'present_address': 'mohakhali', 'expected_result': 'Validation messages displayed correctly for empty or invalid fields'}}, {'TC_AD_11': {'_comment': 'Verify Student Additional Information Form and Navigation', 'fullname': 'john', 'gender': 'Female', 'date_of_birth': '02-01-2019', 'nationality': 'Bangladeshi', 'present_address': 'Mohakhali', 'siblings_in_school': 'Yes', 'sibling_name': 'jorina', 'relationship': 'Sister', 'current_class': 'One', 'roll_number': '1', 'admission_year': '2024', 'expected_result': 'Form saved successfully and user was redirected to the Guardian Information'}}], 'guardian_information': [{'TC_AD_12': {'_comment': 'Verify Guardian Information Form Submission with Valid Data (Required Fields Only)', 'father_fullname': 'kamal', 'father_contact': '01789571651', 'father_occupation': 'Businessman', 'father_nid': '1234567890', 'father_address': 'Dhaka', 'mother_fullname': 'jorina', 'mother_contact': '01789571652', 'mother_occupation': 'Housewife', 'mother_nid': '1234567890', 'mother_address': 'Dhaka', 'legal_guardian': 'Father', 'expected_result': 'Successfully added family information and navigate previous school information form'}}], 'previous_school': [{'TC_AD_13': {'_comment': 'Verify Previous School Academic Details Form Submission with Valid Data (Required Fields Only)', 'school_name': 'ABC Primary School', 'board_curriculum': 'National Curriculum', 'last_class': 'Three', 'school_address': '789 School Street', 'expected_result': 'Previous school information added successfully and user will navigate to document upload form'}}], 'document_upload': [{'TC_AD_14': {'_comment': 'Verify Required Document Upload with Valid Files', 'student_photo': 'student_photo.jpg', 'birth_certificate': 'birth_certificate.pdf', 'academic_records': 'academic_records.pdf', 'expected_result': 'Successfully upload all documents'}}], 'application_submission': [{'TC_AD_15': {'_comment': 'Verify Application Submission from Review Page', 'confirmation_checkbox': True, 'expected_result': \"System should display a confirmation message 'Application Form Completed!'. Popup should contain two options: 'Proceed to Payment' and 'Pay Later'. A note should be displayed: 'Your application will not be reviewed until the fee is paid.'\"}}, {'TC_AD_16': {'_comment': 'Verify Application Form Completion and Payment Prompt', 'confirmation_checkbox': True, 'expected_result': \"System should display a confirmation message 'Application Form Completed!'. Popup should contain two options: 'Proceed to Payment' and 'Pay Later'. A note should be displayed: 'Your application will not be reviewed until the fee is paid.'\"}}], 'payment': [{'TC_AD_18': {'_comment': 'Verify View Voucher Functionality', 'payment_method': 'Offline', 'expected_result': 'System should open the Payment Voucher page/document. Voucher should display: Application Number, Applicant/Student Name, Applied School Name, Application Fee Amount, Payment Instructions (Cash Payment at School Campus)'}}]}"}], "start": 1757503427005, "stop": 1757503452865, "uuid": "d3c7ab52-15f8-4303-bc8c-3e5f8de070a2", "historyId": "8156fb6e9a8b939b479a0cc322b1ff09", "testCaseId": "625bb3b3ada55c8612df46576bfeda70", "fullName": "tests.admission.test_TC_AD_18#test_tc_ad_18", "labels": [{"name": "parentSuite", "value": "tests.admission"}, {"name": "suite", "value": "test_TC_AD_18"}, {"name": "host", "value": "prapti"}, {"name": "thread", "value": "17280-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.admission.test_TC_AD_18"}], "titlePath": ["tests", "admission", "test_TC_AD_18.py"]}